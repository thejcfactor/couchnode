// source: couchbase/routing.v1.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.couchbase.routing.v1.DataRoutingEndpoint', null, global);
goog.exportSymbol('proto.couchbase.routing.v1.QueryRouting', null, global);
goog.exportSymbol('proto.couchbase.routing.v1.QueryRoutingEndpoint', null, global);
goog.exportSymbol('proto.couchbase.routing.v1.RoutingEndpoint', null, global);
goog.exportSymbol('proto.couchbase.routing.v1.VbucketDataRoutingStrategy', null, global);
goog.exportSymbol('proto.couchbase.routing.v1.ViewsRouting', null, global);
goog.exportSymbol('proto.couchbase.routing.v1.ViewsRoutingEndpoint', null, global);
goog.exportSymbol('proto.couchbase.routing.v1.WatchRoutingRequest', null, global);
goog.exportSymbol('proto.couchbase.routing.v1.WatchRoutingResponse', null, global);
goog.exportSymbol('proto.couchbase.routing.v1.WatchRoutingResponse.DataRoutingCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.routing.v1.RoutingEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.routing.v1.RoutingEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.routing.v1.RoutingEndpoint.displayName = 'proto.couchbase.routing.v1.RoutingEndpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.routing.v1.DataRoutingEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.routing.v1.DataRoutingEndpoint.repeatedFields_, null);
};
goog.inherits(proto.couchbase.routing.v1.DataRoutingEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.routing.v1.DataRoutingEndpoint.displayName = 'proto.couchbase.routing.v1.DataRoutingEndpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.routing.v1.VbucketDataRoutingStrategy.repeatedFields_, null);
};
goog.inherits(proto.couchbase.routing.v1.VbucketDataRoutingStrategy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.routing.v1.VbucketDataRoutingStrategy.displayName = 'proto.couchbase.routing.v1.VbucketDataRoutingStrategy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.routing.v1.QueryRoutingEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.routing.v1.QueryRoutingEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.routing.v1.QueryRoutingEndpoint.displayName = 'proto.couchbase.routing.v1.QueryRoutingEndpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.routing.v1.QueryRouting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.routing.v1.QueryRouting.repeatedFields_, null);
};
goog.inherits(proto.couchbase.routing.v1.QueryRouting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.routing.v1.QueryRouting.displayName = 'proto.couchbase.routing.v1.QueryRouting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.routing.v1.ViewsRoutingEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.routing.v1.ViewsRoutingEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.routing.v1.ViewsRoutingEndpoint.displayName = 'proto.couchbase.routing.v1.ViewsRoutingEndpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.routing.v1.ViewsRouting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.routing.v1.ViewsRouting.repeatedFields_, null);
};
goog.inherits(proto.couchbase.routing.v1.ViewsRouting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.routing.v1.ViewsRouting.displayName = 'proto.couchbase.routing.v1.ViewsRouting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.routing.v1.WatchRoutingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.routing.v1.WatchRoutingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.routing.v1.WatchRoutingRequest.displayName = 'proto.couchbase.routing.v1.WatchRoutingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.routing.v1.WatchRoutingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.routing.v1.WatchRoutingResponse.repeatedFields_, proto.couchbase.routing.v1.WatchRoutingResponse.oneofGroups_);
};
goog.inherits(proto.couchbase.routing.v1.WatchRoutingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.routing.v1.WatchRoutingResponse.displayName = 'proto.couchbase.routing.v1.WatchRoutingResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.routing.v1.RoutingEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.routing.v1.RoutingEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.routing.v1.RoutingEndpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.RoutingEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serverGroup: jspb.Message.getFieldWithDefault(msg, 2, ""),
    address: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.routing.v1.RoutingEndpoint}
 */
proto.couchbase.routing.v1.RoutingEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.routing.v1.RoutingEndpoint;
  return proto.couchbase.routing.v1.RoutingEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.routing.v1.RoutingEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.routing.v1.RoutingEndpoint}
 */
proto.couchbase.routing.v1.RoutingEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerGroup(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.routing.v1.RoutingEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.routing.v1.RoutingEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.routing.v1.RoutingEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.RoutingEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServerGroup();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.couchbase.routing.v1.RoutingEndpoint.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.routing.v1.RoutingEndpoint} returns this
 */
proto.couchbase.routing.v1.RoutingEndpoint.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string server_group = 2;
 * @return {string}
 */
proto.couchbase.routing.v1.RoutingEndpoint.prototype.getServerGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.routing.v1.RoutingEndpoint} returns this
 */
proto.couchbase.routing.v1.RoutingEndpoint.prototype.setServerGroup = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string address = 3;
 * @return {string}
 */
proto.couchbase.routing.v1.RoutingEndpoint.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.routing.v1.RoutingEndpoint} returns this
 */
proto.couchbase.routing.v1.RoutingEndpoint.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.routing.v1.DataRoutingEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.routing.v1.DataRoutingEndpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    endpointIdx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    localVbucketsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    groupVbucketsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.routing.v1.DataRoutingEndpoint}
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.routing.v1.DataRoutingEndpoint;
  return proto.couchbase.routing.v1.DataRoutingEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.routing.v1.DataRoutingEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.routing.v1.DataRoutingEndpoint}
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndpointIdx(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLocalVbuckets(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addGroupVbuckets(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.routing.v1.DataRoutingEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.routing.v1.DataRoutingEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndpointIdx();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLocalVbucketsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getGroupVbucketsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 endpoint_idx = 1;
 * @return {number}
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.prototype.getEndpointIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.routing.v1.DataRoutingEndpoint} returns this
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.prototype.setEndpointIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated uint32 local_vbuckets = 2;
 * @return {!Array<number>}
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.prototype.getLocalVbucketsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.couchbase.routing.v1.DataRoutingEndpoint} returns this
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.prototype.setLocalVbucketsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.couchbase.routing.v1.DataRoutingEndpoint} returns this
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.prototype.addLocalVbuckets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.routing.v1.DataRoutingEndpoint} returns this
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.prototype.clearLocalVbucketsList = function() {
  return this.setLocalVbucketsList([]);
};


/**
 * repeated uint32 group_vbuckets = 3;
 * @return {!Array<number>}
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.prototype.getGroupVbucketsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.couchbase.routing.v1.DataRoutingEndpoint} returns this
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.prototype.setGroupVbucketsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.couchbase.routing.v1.DataRoutingEndpoint} returns this
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.prototype.addGroupVbuckets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.routing.v1.DataRoutingEndpoint} returns this
 */
proto.couchbase.routing.v1.DataRoutingEndpoint.prototype.clearGroupVbucketsList = function() {
  return this.setGroupVbucketsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.routing.v1.VbucketDataRoutingStrategy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.routing.v1.VbucketDataRoutingStrategy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.toObject = function(includeInstance, msg) {
  var f, obj = {
    endpointsList: jspb.Message.toObjectList(msg.getEndpointsList(),
    proto.couchbase.routing.v1.DataRoutingEndpoint.toObject, includeInstance),
    numVbuckets: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.routing.v1.VbucketDataRoutingStrategy}
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.routing.v1.VbucketDataRoutingStrategy;
  return proto.couchbase.routing.v1.VbucketDataRoutingStrategy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.routing.v1.VbucketDataRoutingStrategy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.routing.v1.VbucketDataRoutingStrategy}
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.couchbase.routing.v1.DataRoutingEndpoint;
      reader.readMessage(value,proto.couchbase.routing.v1.DataRoutingEndpoint.deserializeBinaryFromReader);
      msg.addEndpoints(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumVbuckets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.routing.v1.VbucketDataRoutingStrategy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.routing.v1.VbucketDataRoutingStrategy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.couchbase.routing.v1.DataRoutingEndpoint.serializeBinaryToWriter
    );
  }
  f = message.getNumVbuckets();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated DataRoutingEndpoint endpoints = 1;
 * @return {!Array<!proto.couchbase.routing.v1.DataRoutingEndpoint>}
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.prototype.getEndpointsList = function() {
  return /** @type{!Array<!proto.couchbase.routing.v1.DataRoutingEndpoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.routing.v1.DataRoutingEndpoint, 1));
};


/**
 * @param {!Array<!proto.couchbase.routing.v1.DataRoutingEndpoint>} value
 * @return {!proto.couchbase.routing.v1.VbucketDataRoutingStrategy} returns this
*/
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.prototype.setEndpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.couchbase.routing.v1.DataRoutingEndpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.routing.v1.DataRoutingEndpoint}
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.prototype.addEndpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.couchbase.routing.v1.DataRoutingEndpoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.routing.v1.VbucketDataRoutingStrategy} returns this
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.prototype.clearEndpointsList = function() {
  return this.setEndpointsList([]);
};


/**
 * optional uint32 num_vbuckets = 3;
 * @return {number}
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.prototype.getNumVbuckets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.routing.v1.VbucketDataRoutingStrategy} returns this
 */
proto.couchbase.routing.v1.VbucketDataRoutingStrategy.prototype.setNumVbuckets = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.routing.v1.QueryRoutingEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.routing.v1.QueryRoutingEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.routing.v1.QueryRoutingEndpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.QueryRoutingEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    endpointIdx: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.routing.v1.QueryRoutingEndpoint}
 */
proto.couchbase.routing.v1.QueryRoutingEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.routing.v1.QueryRoutingEndpoint;
  return proto.couchbase.routing.v1.QueryRoutingEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.routing.v1.QueryRoutingEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.routing.v1.QueryRoutingEndpoint}
 */
proto.couchbase.routing.v1.QueryRoutingEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndpointIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.routing.v1.QueryRoutingEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.routing.v1.QueryRoutingEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.routing.v1.QueryRoutingEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.QueryRoutingEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndpointIdx();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 endpoint_idx = 1;
 * @return {number}
 */
proto.couchbase.routing.v1.QueryRoutingEndpoint.prototype.getEndpointIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.routing.v1.QueryRoutingEndpoint} returns this
 */
proto.couchbase.routing.v1.QueryRoutingEndpoint.prototype.setEndpointIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.routing.v1.QueryRouting.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.routing.v1.QueryRouting.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.routing.v1.QueryRouting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.routing.v1.QueryRouting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.QueryRouting.toObject = function(includeInstance, msg) {
  var f, obj = {
    endpointsList: jspb.Message.toObjectList(msg.getEndpointsList(),
    proto.couchbase.routing.v1.QueryRoutingEndpoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.routing.v1.QueryRouting}
 */
proto.couchbase.routing.v1.QueryRouting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.routing.v1.QueryRouting;
  return proto.couchbase.routing.v1.QueryRouting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.routing.v1.QueryRouting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.routing.v1.QueryRouting}
 */
proto.couchbase.routing.v1.QueryRouting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.couchbase.routing.v1.QueryRoutingEndpoint;
      reader.readMessage(value,proto.couchbase.routing.v1.QueryRoutingEndpoint.deserializeBinaryFromReader);
      msg.addEndpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.routing.v1.QueryRouting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.routing.v1.QueryRouting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.routing.v1.QueryRouting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.QueryRouting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.couchbase.routing.v1.QueryRoutingEndpoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated QueryRoutingEndpoint endpoints = 1;
 * @return {!Array<!proto.couchbase.routing.v1.QueryRoutingEndpoint>}
 */
proto.couchbase.routing.v1.QueryRouting.prototype.getEndpointsList = function() {
  return /** @type{!Array<!proto.couchbase.routing.v1.QueryRoutingEndpoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.routing.v1.QueryRoutingEndpoint, 1));
};


/**
 * @param {!Array<!proto.couchbase.routing.v1.QueryRoutingEndpoint>} value
 * @return {!proto.couchbase.routing.v1.QueryRouting} returns this
*/
proto.couchbase.routing.v1.QueryRouting.prototype.setEndpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.couchbase.routing.v1.QueryRoutingEndpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.routing.v1.QueryRoutingEndpoint}
 */
proto.couchbase.routing.v1.QueryRouting.prototype.addEndpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.couchbase.routing.v1.QueryRoutingEndpoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.routing.v1.QueryRouting} returns this
 */
proto.couchbase.routing.v1.QueryRouting.prototype.clearEndpointsList = function() {
  return this.setEndpointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.routing.v1.ViewsRoutingEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.routing.v1.ViewsRoutingEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.routing.v1.ViewsRoutingEndpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.ViewsRoutingEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    endpointIdx: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.routing.v1.ViewsRoutingEndpoint}
 */
proto.couchbase.routing.v1.ViewsRoutingEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.routing.v1.ViewsRoutingEndpoint;
  return proto.couchbase.routing.v1.ViewsRoutingEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.routing.v1.ViewsRoutingEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.routing.v1.ViewsRoutingEndpoint}
 */
proto.couchbase.routing.v1.ViewsRoutingEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndpointIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.routing.v1.ViewsRoutingEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.routing.v1.ViewsRoutingEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.routing.v1.ViewsRoutingEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.ViewsRoutingEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndpointIdx();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 endpoint_idx = 1;
 * @return {number}
 */
proto.couchbase.routing.v1.ViewsRoutingEndpoint.prototype.getEndpointIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.routing.v1.ViewsRoutingEndpoint} returns this
 */
proto.couchbase.routing.v1.ViewsRoutingEndpoint.prototype.setEndpointIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.routing.v1.ViewsRouting.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.routing.v1.ViewsRouting.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.routing.v1.ViewsRouting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.routing.v1.ViewsRouting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.ViewsRouting.toObject = function(includeInstance, msg) {
  var f, obj = {
    endpointsList: jspb.Message.toObjectList(msg.getEndpointsList(),
    proto.couchbase.routing.v1.ViewsRoutingEndpoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.routing.v1.ViewsRouting}
 */
proto.couchbase.routing.v1.ViewsRouting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.routing.v1.ViewsRouting;
  return proto.couchbase.routing.v1.ViewsRouting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.routing.v1.ViewsRouting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.routing.v1.ViewsRouting}
 */
proto.couchbase.routing.v1.ViewsRouting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.couchbase.routing.v1.ViewsRoutingEndpoint;
      reader.readMessage(value,proto.couchbase.routing.v1.ViewsRoutingEndpoint.deserializeBinaryFromReader);
      msg.addEndpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.routing.v1.ViewsRouting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.routing.v1.ViewsRouting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.routing.v1.ViewsRouting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.ViewsRouting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.couchbase.routing.v1.ViewsRoutingEndpoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ViewsRoutingEndpoint endpoints = 1;
 * @return {!Array<!proto.couchbase.routing.v1.ViewsRoutingEndpoint>}
 */
proto.couchbase.routing.v1.ViewsRouting.prototype.getEndpointsList = function() {
  return /** @type{!Array<!proto.couchbase.routing.v1.ViewsRoutingEndpoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.routing.v1.ViewsRoutingEndpoint, 1));
};


/**
 * @param {!Array<!proto.couchbase.routing.v1.ViewsRoutingEndpoint>} value
 * @return {!proto.couchbase.routing.v1.ViewsRouting} returns this
*/
proto.couchbase.routing.v1.ViewsRouting.prototype.setEndpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.couchbase.routing.v1.ViewsRoutingEndpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.routing.v1.ViewsRoutingEndpoint}
 */
proto.couchbase.routing.v1.ViewsRouting.prototype.addEndpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.couchbase.routing.v1.ViewsRoutingEndpoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.routing.v1.ViewsRouting} returns this
 */
proto.couchbase.routing.v1.ViewsRouting.prototype.clearEndpointsList = function() {
  return this.setEndpointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.routing.v1.WatchRoutingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.routing.v1.WatchRoutingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.routing.v1.WatchRoutingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.WatchRoutingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.routing.v1.WatchRoutingRequest}
 */
proto.couchbase.routing.v1.WatchRoutingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.routing.v1.WatchRoutingRequest;
  return proto.couchbase.routing.v1.WatchRoutingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.routing.v1.WatchRoutingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.routing.v1.WatchRoutingRequest}
 */
proto.couchbase.routing.v1.WatchRoutingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.routing.v1.WatchRoutingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.routing.v1.WatchRoutingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.routing.v1.WatchRoutingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.WatchRoutingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.routing.v1.WatchRoutingRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.routing.v1.WatchRoutingRequest} returns this
 */
proto.couchbase.routing.v1.WatchRoutingRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.routing.v1.WatchRoutingRequest} returns this
 */
proto.couchbase.routing.v1.WatchRoutingRequest.prototype.clearBucketName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.routing.v1.WatchRoutingRequest.prototype.hasBucketName = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.routing.v1.WatchRoutingResponse.repeatedFields_ = [1,2];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.couchbase.routing.v1.WatchRoutingResponse.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.DataRoutingCase = {
  DATA_ROUTING_NOT_SET: 0,
  VBUCKET_DATA_ROUTING: 3
};

/**
 * @return {proto.couchbase.routing.v1.WatchRoutingResponse.DataRoutingCase}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.getDataRoutingCase = function() {
  return /** @type {proto.couchbase.routing.v1.WatchRoutingResponse.DataRoutingCase} */(jspb.Message.computeOneofCase(this, proto.couchbase.routing.v1.WatchRoutingResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.routing.v1.WatchRoutingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.routing.v1.WatchRoutingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.WatchRoutingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    revisionList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    endpointsList: jspb.Message.toObjectList(msg.getEndpointsList(),
    proto.couchbase.routing.v1.RoutingEndpoint.toObject, includeInstance),
    vbucketDataRouting: (f = msg.getVbucketDataRouting()) && proto.couchbase.routing.v1.VbucketDataRoutingStrategy.toObject(includeInstance, f),
    queryRouting: (f = msg.getQueryRouting()) && proto.couchbase.routing.v1.QueryRouting.toObject(includeInstance, f),
    viewsRouting: (f = msg.getViewsRouting()) && proto.couchbase.routing.v1.ViewsRouting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.routing.v1.WatchRoutingResponse;
  return proto.couchbase.routing.v1.WatchRoutingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.routing.v1.WatchRoutingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRevision(values[i]);
      }
      break;
    case 2:
      var value = new proto.couchbase.routing.v1.RoutingEndpoint;
      reader.readMessage(value,proto.couchbase.routing.v1.RoutingEndpoint.deserializeBinaryFromReader);
      msg.addEndpoints(value);
      break;
    case 3:
      var value = new proto.couchbase.routing.v1.VbucketDataRoutingStrategy;
      reader.readMessage(value,proto.couchbase.routing.v1.VbucketDataRoutingStrategy.deserializeBinaryFromReader);
      msg.setVbucketDataRouting(value);
      break;
    case 4:
      var value = new proto.couchbase.routing.v1.QueryRouting;
      reader.readMessage(value,proto.couchbase.routing.v1.QueryRouting.deserializeBinaryFromReader);
      msg.setQueryRouting(value);
      break;
    case 5:
      var value = new proto.couchbase.routing.v1.ViewsRouting;
      reader.readMessage(value,proto.couchbase.routing.v1.ViewsRouting.deserializeBinaryFromReader);
      msg.setViewsRouting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.routing.v1.WatchRoutingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.routing.v1.WatchRoutingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.routing.v1.WatchRoutingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRevisionList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
  f = message.getEndpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.couchbase.routing.v1.RoutingEndpoint.serializeBinaryToWriter
    );
  }
  f = message.getVbucketDataRouting();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.couchbase.routing.v1.VbucketDataRoutingStrategy.serializeBinaryToWriter
    );
  }
  f = message.getQueryRouting();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.couchbase.routing.v1.QueryRouting.serializeBinaryToWriter
    );
  }
  f = message.getViewsRouting();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.couchbase.routing.v1.ViewsRouting.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint64 revision = 1;
 * @return {!Array<number>}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.getRevisionList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse} returns this
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.setRevisionList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse} returns this
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.addRevision = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse} returns this
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.clearRevisionList = function() {
  return this.setRevisionList([]);
};


/**
 * repeated RoutingEndpoint endpoints = 2;
 * @return {!Array<!proto.couchbase.routing.v1.RoutingEndpoint>}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.getEndpointsList = function() {
  return /** @type{!Array<!proto.couchbase.routing.v1.RoutingEndpoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.routing.v1.RoutingEndpoint, 2));
};


/**
 * @param {!Array<!proto.couchbase.routing.v1.RoutingEndpoint>} value
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse} returns this
*/
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.setEndpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.couchbase.routing.v1.RoutingEndpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.routing.v1.RoutingEndpoint}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.addEndpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.couchbase.routing.v1.RoutingEndpoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse} returns this
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.clearEndpointsList = function() {
  return this.setEndpointsList([]);
};


/**
 * optional VbucketDataRoutingStrategy vbucket_data_routing = 3;
 * @return {?proto.couchbase.routing.v1.VbucketDataRoutingStrategy}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.getVbucketDataRouting = function() {
  return /** @type{?proto.couchbase.routing.v1.VbucketDataRoutingStrategy} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.routing.v1.VbucketDataRoutingStrategy, 3));
};


/**
 * @param {?proto.couchbase.routing.v1.VbucketDataRoutingStrategy|undefined} value
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse} returns this
*/
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.setVbucketDataRouting = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.couchbase.routing.v1.WatchRoutingResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse} returns this
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.clearVbucketDataRouting = function() {
  return this.setVbucketDataRouting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.hasVbucketDataRouting = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional QueryRouting query_routing = 4;
 * @return {?proto.couchbase.routing.v1.QueryRouting}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.getQueryRouting = function() {
  return /** @type{?proto.couchbase.routing.v1.QueryRouting} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.routing.v1.QueryRouting, 4));
};


/**
 * @param {?proto.couchbase.routing.v1.QueryRouting|undefined} value
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse} returns this
*/
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.setQueryRouting = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse} returns this
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.clearQueryRouting = function() {
  return this.setQueryRouting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.hasQueryRouting = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ViewsRouting views_routing = 5;
 * @return {?proto.couchbase.routing.v1.ViewsRouting}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.getViewsRouting = function() {
  return /** @type{?proto.couchbase.routing.v1.ViewsRouting} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.routing.v1.ViewsRouting, 5));
};


/**
 * @param {?proto.couchbase.routing.v1.ViewsRouting|undefined} value
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse} returns this
*/
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.setViewsRouting = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.routing.v1.WatchRoutingResponse} returns this
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.clearViewsRouting = function() {
  return this.setViewsRouting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.routing.v1.WatchRoutingResponse.prototype.hasViewsRouting = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.couchbase.routing.v1);
