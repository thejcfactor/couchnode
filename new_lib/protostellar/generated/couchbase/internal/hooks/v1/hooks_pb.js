// source: couchbase/internal/hooks/v1/hooks.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.AddHooksRequest', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.AddHooksResponse', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.ComparisonOperator', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.CreateHooksContextRequest', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.CreateHooksContextResponse', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.Hook', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.HookAction', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.HookAction.ActionCase', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.HookAction.Counter', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.HookAction.Execute', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.HookAction.If', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.HookAction.ReturnError', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.HookCondition', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.SignalBarrierRequest', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.SignalBarrierResponse', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.ValueRef', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.ValueRef.ValueCase', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.WatchBarrierRequest', null, global);
goog.exportSymbol('proto.couchbase.internal.hooks.v1.WatchBarrierResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.CreateHooksContextRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.CreateHooksContextRequest.displayName = 'proto.couchbase.internal.hooks.v1.CreateHooksContextRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.CreateHooksContextResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.CreateHooksContextResponse.displayName = 'proto.couchbase.internal.hooks.v1.CreateHooksContextResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest.displayName = 'proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse.displayName = 'proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.ValueRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.couchbase.internal.hooks.v1.ValueRef.oneofGroups_);
};
goog.inherits(proto.couchbase.internal.hooks.v1.ValueRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.ValueRef.displayName = 'proto.couchbase.internal.hooks.v1.ValueRef';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.HookCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.HookCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.HookCondition.displayName = 'proto.couchbase.internal.hooks.v1.HookCondition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.HookAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.couchbase.internal.hooks.v1.HookAction.oneofGroups_);
};
goog.inherits(proto.couchbase.internal.hooks.v1.HookAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.HookAction.displayName = 'proto.couchbase.internal.hooks.v1.HookAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.HookAction.If = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.internal.hooks.v1.HookAction.If.repeatedFields_, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.HookAction.If, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.HookAction.If.displayName = 'proto.couchbase.internal.hooks.v1.HookAction.If';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.HookAction.Counter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.HookAction.Counter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.HookAction.Counter.displayName = 'proto.couchbase.internal.hooks.v1.HookAction.Counter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.displayName = 'proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.displayName = 'proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.displayName = 'proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.internal.hooks.v1.HookAction.ReturnError.repeatedFields_, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.HookAction.ReturnError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.HookAction.ReturnError.displayName = 'proto.couchbase.internal.hooks.v1.HookAction.ReturnError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.HookAction.Execute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.HookAction.Execute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.HookAction.Execute.displayName = 'proto.couchbase.internal.hooks.v1.HookAction.Execute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.Hook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.internal.hooks.v1.Hook.repeatedFields_, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.Hook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.Hook.displayName = 'proto.couchbase.internal.hooks.v1.Hook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.internal.hooks.v1.AddHooksRequest.repeatedFields_, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.AddHooksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.AddHooksRequest.displayName = 'proto.couchbase.internal.hooks.v1.AddHooksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.AddHooksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.AddHooksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.AddHooksResponse.displayName = 'proto.couchbase.internal.hooks.v1.AddHooksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.WatchBarrierRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.WatchBarrierRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.WatchBarrierRequest.displayName = 'proto.couchbase.internal.hooks.v1.WatchBarrierRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.WatchBarrierResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.WatchBarrierResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.WatchBarrierResponse.displayName = 'proto.couchbase.internal.hooks.v1.WatchBarrierResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.SignalBarrierRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.SignalBarrierRequest.displayName = 'proto.couchbase.internal.hooks.v1.SignalBarrierRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.internal.hooks.v1.SignalBarrierResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.internal.hooks.v1.SignalBarrierResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.internal.hooks.v1.SignalBarrierResponse.displayName = 'proto.couchbase.internal.hooks.v1.SignalBarrierResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.CreateHooksContextRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.CreateHooksContextRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.CreateHooksContextRequest}
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.CreateHooksContextRequest;
  return proto.couchbase.internal.hooks.v1.CreateHooksContextRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.CreateHooksContextRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.CreateHooksContextRequest}
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.CreateHooksContextRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.CreateHooksContextRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.CreateHooksContextRequest} returns this
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.CreateHooksContextResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.CreateHooksContextResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.CreateHooksContextResponse}
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.CreateHooksContextResponse;
  return proto.couchbase.internal.hooks.v1.CreateHooksContextResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.CreateHooksContextResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.CreateHooksContextResponse}
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.CreateHooksContextResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.CreateHooksContextResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.CreateHooksContextResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest}
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest;
  return proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest}
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest} returns this
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse}
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse;
  return proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse}
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.DestroyHooksContextResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.couchbase.internal.hooks.v1.ValueRef.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.couchbase.internal.hooks.v1.ValueRef.ValueCase = {
  VALUE_NOT_SET: 0,
  REQUEST_FIELD: 1,
  COUNTER_VALUE: 2,
  JSON_VALUE: 3
};

/**
 * @return {proto.couchbase.internal.hooks.v1.ValueRef.ValueCase}
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.getValueCase = function() {
  return /** @type {proto.couchbase.internal.hooks.v1.ValueRef.ValueCase} */(jspb.Message.computeOneofCase(this, proto.couchbase.internal.hooks.v1.ValueRef.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.ValueRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.ValueRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.ValueRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestField: jspb.Message.getFieldWithDefault(msg, 1, ""),
    counterValue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jsonValue: msg.getJsonValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.ValueRef}
 */
proto.couchbase.internal.hooks.v1.ValueRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.ValueRef;
  return proto.couchbase.internal.hooks.v1.ValueRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.ValueRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.ValueRef}
 */
proto.couchbase.internal.hooks.v1.ValueRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestField(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounterValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setJsonValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.ValueRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.ValueRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.ValueRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string request_field = 1;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.getRequestField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.ValueRef} returns this
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.setRequestField = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.couchbase.internal.hooks.v1.ValueRef.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.ValueRef} returns this
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.clearRequestField = function() {
  return jspb.Message.setOneofField(this, 1, proto.couchbase.internal.hooks.v1.ValueRef.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.hasRequestField = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string counter_value = 2;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.getCounterValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.ValueRef} returns this
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.setCounterValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.couchbase.internal.hooks.v1.ValueRef.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.ValueRef} returns this
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.clearCounterValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.couchbase.internal.hooks.v1.ValueRef.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.hasCounterValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes json_value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.getJsonValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes json_value = 3;
 * This is a type-conversion wrapper around `getJsonValue()`
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.getJsonValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getJsonValue()));
};


/**
 * optional bytes json_value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getJsonValue()`
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.getJsonValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getJsonValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.couchbase.internal.hooks.v1.ValueRef} returns this
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.setJsonValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.couchbase.internal.hooks.v1.ValueRef.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.ValueRef} returns this
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.clearJsonValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.couchbase.internal.hooks.v1.ValueRef.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.ValueRef.prototype.hasJsonValue = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.HookCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.HookCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.HookCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    left: (f = msg.getLeft()) && proto.couchbase.internal.hooks.v1.ValueRef.toObject(includeInstance, f),
    op: jspb.Message.getFieldWithDefault(msg, 2, 0),
    right: (f = msg.getRight()) && proto.couchbase.internal.hooks.v1.ValueRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.HookCondition}
 */
proto.couchbase.internal.hooks.v1.HookCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.HookCondition;
  return proto.couchbase.internal.hooks.v1.HookCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.HookCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.HookCondition}
 */
proto.couchbase.internal.hooks.v1.HookCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.couchbase.internal.hooks.v1.ValueRef;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.ValueRef.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 2:
      var value = /** @type {!proto.couchbase.internal.hooks.v1.ComparisonOperator} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 3:
      var value = new proto.couchbase.internal.hooks.v1.ValueRef;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.ValueRef.deserializeBinaryFromReader);
      msg.setRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.HookCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.HookCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.HookCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.couchbase.internal.hooks.v1.ValueRef.serializeBinaryToWriter
    );
  }
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.couchbase.internal.hooks.v1.ValueRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional ValueRef left = 1;
 * @return {?proto.couchbase.internal.hooks.v1.ValueRef}
 */
proto.couchbase.internal.hooks.v1.HookCondition.prototype.getLeft = function() {
  return /** @type{?proto.couchbase.internal.hooks.v1.ValueRef} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.internal.hooks.v1.ValueRef, 1));
};


/**
 * @param {?proto.couchbase.internal.hooks.v1.ValueRef|undefined} value
 * @return {!proto.couchbase.internal.hooks.v1.HookCondition} returns this
*/
proto.couchbase.internal.hooks.v1.HookCondition.prototype.setLeft = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.HookCondition} returns this
 */
proto.couchbase.internal.hooks.v1.HookCondition.prototype.clearLeft = function() {
  return this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.HookCondition.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ComparisonOperator op = 2;
 * @return {!proto.couchbase.internal.hooks.v1.ComparisonOperator}
 */
proto.couchbase.internal.hooks.v1.HookCondition.prototype.getOp = function() {
  return /** @type {!proto.couchbase.internal.hooks.v1.ComparisonOperator} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.couchbase.internal.hooks.v1.ComparisonOperator} value
 * @return {!proto.couchbase.internal.hooks.v1.HookCondition} returns this
 */
proto.couchbase.internal.hooks.v1.HookCondition.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ValueRef right = 3;
 * @return {?proto.couchbase.internal.hooks.v1.ValueRef}
 */
proto.couchbase.internal.hooks.v1.HookCondition.prototype.getRight = function() {
  return /** @type{?proto.couchbase.internal.hooks.v1.ValueRef} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.internal.hooks.v1.ValueRef, 3));
};


/**
 * @param {?proto.couchbase.internal.hooks.v1.ValueRef|undefined} value
 * @return {!proto.couchbase.internal.hooks.v1.HookCondition} returns this
*/
proto.couchbase.internal.hooks.v1.HookCondition.prototype.setRight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.HookCondition} returns this
 */
proto.couchbase.internal.hooks.v1.HookCondition.prototype.clearRight = function() {
  return this.setRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.HookCondition.prototype.hasRight = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.couchbase.internal.hooks.v1.HookAction.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.couchbase.internal.hooks.v1.HookAction.ActionCase = {
  ACTION_NOT_SET: 0,
  IF: 1,
  COUNTER: 2,
  WAIT_ON_BARRIER: 3,
  SIGNAL_BARRIER: 4,
  RETURN_RESPONSE: 5,
  RETURN_ERROR: 6,
  EXECUTE: 7
};

/**
 * @return {proto.couchbase.internal.hooks.v1.HookAction.ActionCase}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.getActionCase = function() {
  return /** @type {proto.couchbase.internal.hooks.v1.HookAction.ActionCase} */(jspb.Message.computeOneofCase(this, proto.couchbase.internal.hooks.v1.HookAction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.HookAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.HookAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_if: (f = msg.getIf()) && proto.couchbase.internal.hooks.v1.HookAction.If.toObject(includeInstance, f),
    counter: (f = msg.getCounter()) && proto.couchbase.internal.hooks.v1.HookAction.Counter.toObject(includeInstance, f),
    waitOnBarrier: (f = msg.getWaitOnBarrier()) && proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.toObject(includeInstance, f),
    signalBarrier: (f = msg.getSignalBarrier()) && proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.toObject(includeInstance, f),
    returnResponse: (f = msg.getReturnResponse()) && proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.toObject(includeInstance, f),
    returnError: (f = msg.getReturnError()) && proto.couchbase.internal.hooks.v1.HookAction.ReturnError.toObject(includeInstance, f),
    execute: (f = msg.getExecute()) && proto.couchbase.internal.hooks.v1.HookAction.Execute.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction}
 */
proto.couchbase.internal.hooks.v1.HookAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.HookAction;
  return proto.couchbase.internal.hooks.v1.HookAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction}
 */
proto.couchbase.internal.hooks.v1.HookAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.couchbase.internal.hooks.v1.HookAction.If;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.HookAction.If.deserializeBinaryFromReader);
      msg.setIf(value);
      break;
    case 2:
      var value = new proto.couchbase.internal.hooks.v1.HookAction.Counter;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.HookAction.Counter.deserializeBinaryFromReader);
      msg.setCounter(value);
      break;
    case 3:
      var value = new proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.deserializeBinaryFromReader);
      msg.setWaitOnBarrier(value);
      break;
    case 4:
      var value = new proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.deserializeBinaryFromReader);
      msg.setSignalBarrier(value);
      break;
    case 5:
      var value = new proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.deserializeBinaryFromReader);
      msg.setReturnResponse(value);
      break;
    case 6:
      var value = new proto.couchbase.internal.hooks.v1.HookAction.ReturnError;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.HookAction.ReturnError.deserializeBinaryFromReader);
      msg.setReturnError(value);
      break;
    case 7:
      var value = new proto.couchbase.internal.hooks.v1.HookAction.Execute;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.HookAction.Execute.deserializeBinaryFromReader);
      msg.setExecute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.HookAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIf();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.couchbase.internal.hooks.v1.HookAction.If.serializeBinaryToWriter
    );
  }
  f = message.getCounter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.couchbase.internal.hooks.v1.HookAction.Counter.serializeBinaryToWriter
    );
  }
  f = message.getWaitOnBarrier();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.serializeBinaryToWriter
    );
  }
  f = message.getSignalBarrier();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.serializeBinaryToWriter
    );
  }
  f = message.getReturnResponse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.serializeBinaryToWriter
    );
  }
  f = message.getReturnError();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.couchbase.internal.hooks.v1.HookAction.ReturnError.serializeBinaryToWriter
    );
  }
  f = message.getExecute();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.couchbase.internal.hooks.v1.HookAction.Execute.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.internal.hooks.v1.HookAction.If.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.HookAction.If.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.If} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.If.toObject = function(includeInstance, msg) {
  var f, obj = {
    condList: jspb.Message.toObjectList(msg.getCondList(),
    proto.couchbase.internal.hooks.v1.HookCondition.toObject, includeInstance),
    matchList: jspb.Message.toObjectList(msg.getMatchList(),
    proto.couchbase.internal.hooks.v1.HookAction.toObject, includeInstance),
    noMatchList: jspb.Message.toObjectList(msg.getNoMatchList(),
    proto.couchbase.internal.hooks.v1.HookAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.If}
 */
proto.couchbase.internal.hooks.v1.HookAction.If.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.HookAction.If;
  return proto.couchbase.internal.hooks.v1.HookAction.If.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.If} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.If}
 */
proto.couchbase.internal.hooks.v1.HookAction.If.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.couchbase.internal.hooks.v1.HookCondition;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.HookCondition.deserializeBinaryFromReader);
      msg.addCond(value);
      break;
    case 2:
      var value = new proto.couchbase.internal.hooks.v1.HookAction;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.HookAction.deserializeBinaryFromReader);
      msg.addMatch(value);
      break;
    case 3:
      var value = new proto.couchbase.internal.hooks.v1.HookAction;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.HookAction.deserializeBinaryFromReader);
      msg.addNoMatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.HookAction.If.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.If} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.If.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCondList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.couchbase.internal.hooks.v1.HookCondition.serializeBinaryToWriter
    );
  }
  f = message.getMatchList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.couchbase.internal.hooks.v1.HookAction.serializeBinaryToWriter
    );
  }
  f = message.getNoMatchList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.couchbase.internal.hooks.v1.HookAction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated HookCondition cond = 1;
 * @return {!Array<!proto.couchbase.internal.hooks.v1.HookCondition>}
 */
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.getCondList = function() {
  return /** @type{!Array<!proto.couchbase.internal.hooks.v1.HookCondition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.internal.hooks.v1.HookCondition, 1));
};


/**
 * @param {!Array<!proto.couchbase.internal.hooks.v1.HookCondition>} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.If} returns this
*/
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.setCondList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.couchbase.internal.hooks.v1.HookCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.internal.hooks.v1.HookCondition}
 */
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.addCond = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.couchbase.internal.hooks.v1.HookCondition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.If} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.clearCondList = function() {
  return this.setCondList([]);
};


/**
 * repeated HookAction match = 2;
 * @return {!Array<!proto.couchbase.internal.hooks.v1.HookAction>}
 */
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.getMatchList = function() {
  return /** @type{!Array<!proto.couchbase.internal.hooks.v1.HookAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.internal.hooks.v1.HookAction, 2));
};


/**
 * @param {!Array<!proto.couchbase.internal.hooks.v1.HookAction>} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.If} returns this
*/
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.setMatchList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.couchbase.internal.hooks.v1.HookAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.internal.hooks.v1.HookAction}
 */
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.addMatch = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.couchbase.internal.hooks.v1.HookAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.If} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.clearMatchList = function() {
  return this.setMatchList([]);
};


/**
 * repeated HookAction no_match = 3;
 * @return {!Array<!proto.couchbase.internal.hooks.v1.HookAction>}
 */
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.getNoMatchList = function() {
  return /** @type{!Array<!proto.couchbase.internal.hooks.v1.HookAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.internal.hooks.v1.HookAction, 3));
};


/**
 * @param {!Array<!proto.couchbase.internal.hooks.v1.HookAction>} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.If} returns this
*/
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.setNoMatchList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.couchbase.internal.hooks.v1.HookAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.internal.hooks.v1.HookAction}
 */
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.addNoMatch = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.couchbase.internal.hooks.v1.HookAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.If} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.If.prototype.clearNoMatchList = function() {
  return this.setNoMatchList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.HookAction.Counter.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.HookAction.Counter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.Counter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.Counter.toObject = function(includeInstance, msg) {
  var f, obj = {
    counterId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    delta: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.Counter}
 */
proto.couchbase.internal.hooks.v1.HookAction.Counter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.HookAction.Counter;
  return proto.couchbase.internal.hooks.v1.HookAction.Counter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.Counter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.Counter}
 */
proto.couchbase.internal.hooks.v1.HookAction.Counter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounterId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.HookAction.Counter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.HookAction.Counter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.Counter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.Counter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCounterId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDelta();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string counter_id = 1;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.HookAction.Counter.prototype.getCounterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.Counter} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.Counter.prototype.setCounterId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 delta = 2;
 * @return {number}
 */
proto.couchbase.internal.hooks.v1.HookAction.Counter.prototype.getDelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.Counter} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.Counter.prototype.setDelta = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.toObject = function(includeInstance, msg) {
  var f, obj = {
    barrierId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier}
 */
proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier;
  return proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier}
 */
proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBarrierId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBarrierId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string barrier_id = 1;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.prototype.getBarrierId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier.prototype.setBarrierId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.toObject = function(includeInstance, msg) {
  var f, obj = {
    barrierId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signalAll: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier}
 */
proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier;
  return proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier}
 */
proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBarrierId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSignalAll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBarrierId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignalAll();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string barrier_id = 1;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.prototype.getBarrierId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.prototype.setBarrierId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool signal_all = 2;
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.prototype.getSignalAll = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier.prototype.setSignalAll = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse;
  return proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any value = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse} returns this
*/
proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.HookAction.ReturnError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.ReturnError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    detailsList: jspb.Message.toObjectList(msg.getDetailsList(),
    google_protobuf_any_pb.Any.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.ReturnError}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.HookAction.ReturnError;
  return proto.couchbase.internal.hooks.v1.HookAction.ReturnError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.ReturnError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.ReturnError}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.addDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.HookAction.ReturnError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.ReturnError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.ReturnError} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.ReturnError} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated google.protobuf.Any details = 3;
 * @return {!Array<!proto.google.protobuf.Any>}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.prototype.getDetailsList = function() {
  return /** @type{!Array<!proto.google.protobuf.Any>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {!Array<!proto.google.protobuf.Any>} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.ReturnError} returns this
*/
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.prototype.setDetailsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.google.protobuf.Any=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Any}
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.prototype.addDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.google.protobuf.Any, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.ReturnError} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.ReturnError.prototype.clearDetailsList = function() {
  return this.setDetailsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.HookAction.Execute.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.HookAction.Execute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.Execute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.Execute.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.Execute}
 */
proto.couchbase.internal.hooks.v1.HookAction.Execute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.HookAction.Execute;
  return proto.couchbase.internal.hooks.v1.HookAction.Execute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.Execute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction.Execute}
 */
proto.couchbase.internal.hooks.v1.HookAction.Execute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.HookAction.Execute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.HookAction.Execute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.HookAction.Execute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.HookAction.Execute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional If if = 1;
 * @return {?proto.couchbase.internal.hooks.v1.HookAction.If}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.getIf = function() {
  return /** @type{?proto.couchbase.internal.hooks.v1.HookAction.If} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.internal.hooks.v1.HookAction.If, 1));
};


/**
 * @param {?proto.couchbase.internal.hooks.v1.HookAction.If|undefined} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
*/
proto.couchbase.internal.hooks.v1.HookAction.prototype.setIf = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.couchbase.internal.hooks.v1.HookAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.clearIf = function() {
  return this.setIf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.hasIf = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Counter counter = 2;
 * @return {?proto.couchbase.internal.hooks.v1.HookAction.Counter}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.getCounter = function() {
  return /** @type{?proto.couchbase.internal.hooks.v1.HookAction.Counter} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.internal.hooks.v1.HookAction.Counter, 2));
};


/**
 * @param {?proto.couchbase.internal.hooks.v1.HookAction.Counter|undefined} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
*/
proto.couchbase.internal.hooks.v1.HookAction.prototype.setCounter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.couchbase.internal.hooks.v1.HookAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.clearCounter = function() {
  return this.setCounter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.hasCounter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WaitOnBarrier wait_on_barrier = 3;
 * @return {?proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.getWaitOnBarrier = function() {
  return /** @type{?proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier, 3));
};


/**
 * @param {?proto.couchbase.internal.hooks.v1.HookAction.WaitOnBarrier|undefined} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
*/
proto.couchbase.internal.hooks.v1.HookAction.prototype.setWaitOnBarrier = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.couchbase.internal.hooks.v1.HookAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.clearWaitOnBarrier = function() {
  return this.setWaitOnBarrier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.hasWaitOnBarrier = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SignalBarrier signal_barrier = 4;
 * @return {?proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.getSignalBarrier = function() {
  return /** @type{?proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier, 4));
};


/**
 * @param {?proto.couchbase.internal.hooks.v1.HookAction.SignalBarrier|undefined} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
*/
proto.couchbase.internal.hooks.v1.HookAction.prototype.setSignalBarrier = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.couchbase.internal.hooks.v1.HookAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.clearSignalBarrier = function() {
  return this.setSignalBarrier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.hasSignalBarrier = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ReturnResponse return_response = 5;
 * @return {?proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.getReturnResponse = function() {
  return /** @type{?proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse, 5));
};


/**
 * @param {?proto.couchbase.internal.hooks.v1.HookAction.ReturnResponse|undefined} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
*/
proto.couchbase.internal.hooks.v1.HookAction.prototype.setReturnResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.couchbase.internal.hooks.v1.HookAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.clearReturnResponse = function() {
  return this.setReturnResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.hasReturnResponse = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ReturnError return_error = 6;
 * @return {?proto.couchbase.internal.hooks.v1.HookAction.ReturnError}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.getReturnError = function() {
  return /** @type{?proto.couchbase.internal.hooks.v1.HookAction.ReturnError} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.internal.hooks.v1.HookAction.ReturnError, 6));
};


/**
 * @param {?proto.couchbase.internal.hooks.v1.HookAction.ReturnError|undefined} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
*/
proto.couchbase.internal.hooks.v1.HookAction.prototype.setReturnError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.couchbase.internal.hooks.v1.HookAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.clearReturnError = function() {
  return this.setReturnError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.hasReturnError = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Execute execute = 7;
 * @return {?proto.couchbase.internal.hooks.v1.HookAction.Execute}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.getExecute = function() {
  return /** @type{?proto.couchbase.internal.hooks.v1.HookAction.Execute} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.internal.hooks.v1.HookAction.Execute, 7));
};


/**
 * @param {?proto.couchbase.internal.hooks.v1.HookAction.Execute|undefined} value
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
*/
proto.couchbase.internal.hooks.v1.HookAction.prototype.setExecute = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.couchbase.internal.hooks.v1.HookAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.HookAction} returns this
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.clearExecute = function() {
  return this.setExecute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.HookAction.prototype.hasExecute = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.internal.hooks.v1.Hook.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.Hook.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.Hook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.Hook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.Hook.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    targetMethod: jspb.Message.getFieldWithDefault(msg, 3, ""),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.couchbase.internal.hooks.v1.HookAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.Hook}
 */
proto.couchbase.internal.hooks.v1.Hook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.Hook;
  return proto.couchbase.internal.hooks.v1.Hook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.Hook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.Hook}
 */
proto.couchbase.internal.hooks.v1.Hook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetMethod(value);
      break;
    case 4:
      var value = new proto.couchbase.internal.hooks.v1.HookAction;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.HookAction.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.Hook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.Hook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.Hook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.Hook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTargetMethod();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.couchbase.internal.hooks.v1.HookAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.Hook.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.Hook} returns this
 */
proto.couchbase.internal.hooks.v1.Hook.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.Hook.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.Hook} returns this
 */
proto.couchbase.internal.hooks.v1.Hook.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string target_method = 3;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.Hook.prototype.getTargetMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.Hook} returns this
 */
proto.couchbase.internal.hooks.v1.Hook.prototype.setTargetMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated HookAction actions = 4;
 * @return {!Array<!proto.couchbase.internal.hooks.v1.HookAction>}
 */
proto.couchbase.internal.hooks.v1.Hook.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.couchbase.internal.hooks.v1.HookAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.internal.hooks.v1.HookAction, 4));
};


/**
 * @param {!Array<!proto.couchbase.internal.hooks.v1.HookAction>} value
 * @return {!proto.couchbase.internal.hooks.v1.Hook} returns this
*/
proto.couchbase.internal.hooks.v1.Hook.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.couchbase.internal.hooks.v1.HookAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.internal.hooks.v1.HookAction}
 */
proto.couchbase.internal.hooks.v1.Hook.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.couchbase.internal.hooks.v1.HookAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.internal.hooks.v1.Hook} returns this
 */
proto.couchbase.internal.hooks.v1.Hook.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.AddHooksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.AddHooksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hooksContextId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hooksList: jspb.Message.toObjectList(msg.getHooksList(),
    proto.couchbase.internal.hooks.v1.Hook.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.AddHooksRequest}
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.AddHooksRequest;
  return proto.couchbase.internal.hooks.v1.AddHooksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.AddHooksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.AddHooksRequest}
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHooksContextId(value);
      break;
    case 2:
      var value = new proto.couchbase.internal.hooks.v1.Hook;
      reader.readMessage(value,proto.couchbase.internal.hooks.v1.Hook.deserializeBinaryFromReader);
      msg.addHooks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.AddHooksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.AddHooksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHooksContextId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHooksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.couchbase.internal.hooks.v1.Hook.serializeBinaryToWriter
    );
  }
};


/**
 * optional string hooks_context_id = 1;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest.prototype.getHooksContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.AddHooksRequest} returns this
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest.prototype.setHooksContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Hook hooks = 2;
 * @return {!Array<!proto.couchbase.internal.hooks.v1.Hook>}
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest.prototype.getHooksList = function() {
  return /** @type{!Array<!proto.couchbase.internal.hooks.v1.Hook>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.internal.hooks.v1.Hook, 2));
};


/**
 * @param {!Array<!proto.couchbase.internal.hooks.v1.Hook>} value
 * @return {!proto.couchbase.internal.hooks.v1.AddHooksRequest} returns this
*/
proto.couchbase.internal.hooks.v1.AddHooksRequest.prototype.setHooksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.couchbase.internal.hooks.v1.Hook=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.internal.hooks.v1.Hook}
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest.prototype.addHooks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.couchbase.internal.hooks.v1.Hook, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.internal.hooks.v1.AddHooksRequest} returns this
 */
proto.couchbase.internal.hooks.v1.AddHooksRequest.prototype.clearHooksList = function() {
  return this.setHooksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.AddHooksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.AddHooksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.AddHooksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.AddHooksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.AddHooksResponse}
 */
proto.couchbase.internal.hooks.v1.AddHooksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.AddHooksResponse;
  return proto.couchbase.internal.hooks.v1.AddHooksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.AddHooksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.AddHooksResponse}
 */
proto.couchbase.internal.hooks.v1.AddHooksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.AddHooksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.AddHooksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.AddHooksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.AddHooksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.WatchBarrierRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.WatchBarrierRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.WatchBarrierRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.WatchBarrierRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hooksContextId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    barrierId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.WatchBarrierRequest}
 */
proto.couchbase.internal.hooks.v1.WatchBarrierRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.WatchBarrierRequest;
  return proto.couchbase.internal.hooks.v1.WatchBarrierRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.WatchBarrierRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.WatchBarrierRequest}
 */
proto.couchbase.internal.hooks.v1.WatchBarrierRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHooksContextId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBarrierId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.WatchBarrierRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.WatchBarrierRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.WatchBarrierRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.WatchBarrierRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHooksContextId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBarrierId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string hooks_context_id = 1;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.WatchBarrierRequest.prototype.getHooksContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.WatchBarrierRequest} returns this
 */
proto.couchbase.internal.hooks.v1.WatchBarrierRequest.prototype.setHooksContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string barrier_id = 2;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.WatchBarrierRequest.prototype.getBarrierId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.WatchBarrierRequest} returns this
 */
proto.couchbase.internal.hooks.v1.WatchBarrierRequest.prototype.setBarrierId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.WatchBarrierResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.WatchBarrierResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.WatchBarrierResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.WatchBarrierResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    waitId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.WatchBarrierResponse}
 */
proto.couchbase.internal.hooks.v1.WatchBarrierResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.WatchBarrierResponse;
  return proto.couchbase.internal.hooks.v1.WatchBarrierResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.WatchBarrierResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.WatchBarrierResponse}
 */
proto.couchbase.internal.hooks.v1.WatchBarrierResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.WatchBarrierResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.WatchBarrierResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.WatchBarrierResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.WatchBarrierResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWaitId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string wait_id = 2;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.WatchBarrierResponse.prototype.getWaitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.WatchBarrierResponse} returns this
 */
proto.couchbase.internal.hooks.v1.WatchBarrierResponse.prototype.setWaitId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.SignalBarrierRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.SignalBarrierRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hooksContextId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    barrierId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    waitId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.SignalBarrierRequest}
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.SignalBarrierRequest;
  return proto.couchbase.internal.hooks.v1.SignalBarrierRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.SignalBarrierRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.SignalBarrierRequest}
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHooksContextId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBarrierId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.SignalBarrierRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.SignalBarrierRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHooksContextId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBarrierId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string hooks_context_id = 1;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.prototype.getHooksContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.SignalBarrierRequest} returns this
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.prototype.setHooksContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string barrier_id = 2;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.prototype.getBarrierId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.SignalBarrierRequest} returns this
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.prototype.setBarrierId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string wait_id = 3;
 * @return {string}
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.prototype.getWaitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.internal.hooks.v1.SignalBarrierRequest} returns this
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.prototype.setWaitId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.internal.hooks.v1.SignalBarrierRequest} returns this
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.prototype.clearWaitId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.internal.hooks.v1.SignalBarrierRequest.prototype.hasWaitId = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.internal.hooks.v1.SignalBarrierResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.internal.hooks.v1.SignalBarrierResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.internal.hooks.v1.SignalBarrierResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.SignalBarrierResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.internal.hooks.v1.SignalBarrierResponse}
 */
proto.couchbase.internal.hooks.v1.SignalBarrierResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.internal.hooks.v1.SignalBarrierResponse;
  return proto.couchbase.internal.hooks.v1.SignalBarrierResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.internal.hooks.v1.SignalBarrierResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.internal.hooks.v1.SignalBarrierResponse}
 */
proto.couchbase.internal.hooks.v1.SignalBarrierResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.internal.hooks.v1.SignalBarrierResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.internal.hooks.v1.SignalBarrierResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.internal.hooks.v1.SignalBarrierResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.internal.hooks.v1.SignalBarrierResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.couchbase.internal.hooks.v1.ComparisonOperator = {
  COMPARISON_OPERATOR_EQUAL: 0,
  COMPARISON_OPERATOR_NOT_EQUAL: 1,
  COMPARISON_OPERATOR_GREATER_THAN: 2,
  COMPARISON_OPERATOR_GREATER_THAN_OR_EQUAL: 3,
  COMPARISON_OPERATOR_LESS_THAN: 4,
  COMPARISON_OPERATOR_LESS_THAN_OR_EQUAL: 5
};

goog.object.extend(exports, proto.couchbase.internal.hooks.v1);
