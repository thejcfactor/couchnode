// source: couchbase/admin/query/v1/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.CreateIndexRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.CreateIndexResponse', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.DropIndexRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.DropIndexResponse', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.DropPrimaryIndexRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.DropPrimaryIndexResponse', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.GetAllIndexesRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.GetAllIndexesResponse', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.IndexState', null, global);
goog.exportSymbol('proto.couchbase.admin.query.v1.IndexType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.query.v1.GetAllIndexesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.GetAllIndexesRequest.displayName = 'proto.couchbase.admin.query.v1.GetAllIndexesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.admin.query.v1.GetAllIndexesResponse.repeatedFields_, null);
};
goog.inherits(proto.couchbase.admin.query.v1.GetAllIndexesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.GetAllIndexesResponse.displayName = 'proto.couchbase.admin.query.v1.GetAllIndexesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.repeatedFields_, null);
};
goog.inherits(proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.displayName = 'proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.displayName = 'proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse.displayName = 'proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.CreateIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.admin.query.v1.CreateIndexRequest.repeatedFields_, null);
};
goog.inherits(proto.couchbase.admin.query.v1.CreateIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.CreateIndexRequest.displayName = 'proto.couchbase.admin.query.v1.CreateIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.CreateIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.query.v1.CreateIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.CreateIndexResponse.displayName = 'proto.couchbase.admin.query.v1.CreateIndexResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.query.v1.DropPrimaryIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.displayName = 'proto.couchbase.admin.query.v1.DropPrimaryIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.query.v1.DropPrimaryIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.DropPrimaryIndexResponse.displayName = 'proto.couchbase.admin.query.v1.DropPrimaryIndexResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.DropIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.query.v1.DropIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.DropIndexRequest.displayName = 'proto.couchbase.admin.query.v1.DropIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.DropIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.query.v1.DropIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.DropIndexResponse.displayName = 'proto.couchbase.admin.query.v1.DropIndexResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.displayName = 'proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.repeatedFields_, null);
};
goog.inherits(proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.displayName = 'proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.GetAllIndexesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.GetAllIndexesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collectionName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesRequest}
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.GetAllIndexesRequest;
  return proto.couchbase.admin.query.v1.GetAllIndexesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.GetAllIndexesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesRequest}
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.GetAllIndexesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.GetAllIndexesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesRequest} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesRequest} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.clearBucketName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.hasBucketName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string scope_name = 2;
 * @return {string}
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesRequest} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesRequest} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.clearScopeName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.hasScopeName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string collection_name = 3;
 * @return {string}
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesRequest} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesRequest} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.clearCollectionName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.GetAllIndexesRequest.prototype.hasCollectionName = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.GetAllIndexesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.GetAllIndexesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.GetAllIndexesResponse;
  return proto.couchbase.admin.query.v1.GetAllIndexesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.GetAllIndexesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index;
      reader.readMessage(value,proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.GetAllIndexesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.GetAllIndexesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collectionName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isPrimary: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0),
    fieldsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    condition: jspb.Message.getFieldWithDefault(msg, 9, ""),
    partition: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index;
  return proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPrimary(value);
      break;
    case 6:
      var value = /** @type {!proto.couchbase.admin.query.v1.IndexType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {!proto.couchbase.admin.query.v1.IndexState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addFields(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCondition(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScopeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsPrimary();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope_name = 2;
 * @return {string}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.setScopeName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string collection_name = 3;
 * @return {string}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_primary = 5;
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.getIsPrimary = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.setIsPrimary = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional IndexType type = 6;
 * @return {!proto.couchbase.admin.query.v1.IndexType}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.getType = function() {
  return /** @type {!proto.couchbase.admin.query.v1.IndexType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.couchbase.admin.query.v1.IndexType} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional IndexState state = 7;
 * @return {!proto.couchbase.admin.query.v1.IndexState}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.getState = function() {
  return /** @type {!proto.couchbase.admin.query.v1.IndexState} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.couchbase.admin.query.v1.IndexState} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * repeated string fields = 8;
 * @return {!Array<string>}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.getFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.setFieldsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.addFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * optional string condition = 9;
 * @return {string}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.getCondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.setCondition = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.clearCondition = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string partition = 10;
 * @return {string}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.getPartition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.setPartition = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.clearPartition = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index.prototype.hasPartition = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated Index indexes = 1;
 * @return {!Array<!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index>}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index, 1));
};


/**
 * @param {!Array<!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index>} value
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse} returns this
*/
proto.couchbase.admin.query.v1.GetAllIndexesResponse.prototype.setIndexesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index}
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.couchbase.admin.query.v1.GetAllIndexesResponse.Index, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.admin.query.v1.GetAllIndexesResponse} returns this
 */
proto.couchbase.admin.query.v1.GetAllIndexesResponse.prototype.clearIndexesList = function() {
  return this.setIndexesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collectionName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    numReplicas: jspb.Message.getFieldWithDefault(msg, 5, 0),
    deferred: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest;
  return proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumReplicas(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeferred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope_name = 2;
 * @return {string}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.clearScopeName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.hasScopeName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string collection_name = 3;
 * @return {string}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.clearCollectionName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.hasCollectionName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.setName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.clearName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 num_replicas = 5;
 * @return {number}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.getNumReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.setNumReplicas = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.clearNumReplicas = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.hasNumReplicas = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool deferred = 6;
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.getDeferred = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.setDeferred = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.clearDeferred = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexRequest.prototype.hasDeferred = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse;
  return proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.CreatePrimaryIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.CreateIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.CreateIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collectionName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    numReplicas: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fieldsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    deferred: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.CreateIndexRequest;
  return proto.couchbase.admin.query.v1.CreateIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.CreateIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumReplicas(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addFields(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeferred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.CreateIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.CreateIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope_name = 2;
 * @return {string}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.clearScopeName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.hasScopeName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string collection_name = 3;
 * @return {string}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.clearCollectionName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.hasCollectionName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 num_replicas = 5;
 * @return {number}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.getNumReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.setNumReplicas = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.clearNumReplicas = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.hasNumReplicas = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated string fields = 6;
 * @return {!Array<string>}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.getFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.setFieldsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.addFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * optional bool deferred = 7;
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.getDeferred = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.setDeferred = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.CreateIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.clearDeferred = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.CreateIndexRequest.prototype.hasDeferred = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.CreateIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.CreateIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.CreateIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.CreateIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.CreateIndexResponse}
 */
proto.couchbase.admin.query.v1.CreateIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.CreateIndexResponse;
  return proto.couchbase.admin.query.v1.CreateIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.CreateIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.CreateIndexResponse}
 */
proto.couchbase.admin.query.v1.CreateIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.CreateIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.CreateIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.CreateIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.CreateIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.DropPrimaryIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collectionName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.DropPrimaryIndexRequest}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.DropPrimaryIndexRequest;
  return proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.DropPrimaryIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.DropPrimaryIndexRequest}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.DropPrimaryIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.DropPrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope_name = 2;
 * @return {string}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.DropPrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.DropPrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.clearScopeName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.hasScopeName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string collection_name = 3;
 * @return {string}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.DropPrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.DropPrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.clearCollectionName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.hasCollectionName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.DropPrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.setName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.DropPrimaryIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.clearName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.DropPrimaryIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.DropPrimaryIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.DropPrimaryIndexResponse}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.DropPrimaryIndexResponse;
  return proto.couchbase.admin.query.v1.DropPrimaryIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.DropPrimaryIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.DropPrimaryIndexResponse}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.DropPrimaryIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.DropPrimaryIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.DropPrimaryIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.DropIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.DropIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.DropIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collectionName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.DropIndexRequest}
 */
proto.couchbase.admin.query.v1.DropIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.DropIndexRequest;
  return proto.couchbase.admin.query.v1.DropIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.DropIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.DropIndexRequest}
 */
proto.couchbase.admin.query.v1.DropIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.DropIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.DropIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.DropIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.DropIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope_name = 2;
 * @return {string}
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.DropIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.DropIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.clearScopeName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.hasScopeName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string collection_name = 3;
 * @return {string}
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.DropIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.DropIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.clearCollectionName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.hasCollectionName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.DropIndexRequest} returns this
 */
proto.couchbase.admin.query.v1.DropIndexRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.DropIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.DropIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.DropIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.DropIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.DropIndexResponse}
 */
proto.couchbase.admin.query.v1.DropIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.DropIndexResponse;
  return proto.couchbase.admin.query.v1.DropIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.DropIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.DropIndexResponse}
 */
proto.couchbase.admin.query.v1.DropIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.DropIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.DropIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.DropIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.DropIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collectionName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest;
  return proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest} returns this
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope_name = 2;
 * @return {string}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest} returns this
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest} returns this
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.prototype.clearScopeName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.prototype.hasScopeName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string collection_name = 3;
 * @return {string}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest} returns this
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest} returns this
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.prototype.clearCollectionName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesRequest.prototype.hasCollectionName = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexNamesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse;
  return proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIndexNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string index_names = 1;
 * @return {!Array<string>}
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.prototype.getIndexNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse} returns this
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.prototype.setIndexNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse} returns this
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.prototype.addIndexNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse} returns this
 */
proto.couchbase.admin.query.v1.BuildDeferredIndexesResponse.prototype.clearIndexNamesList = function() {
  return this.setIndexNamesList([]);
};


/**
 * @enum {number}
 */
proto.couchbase.admin.query.v1.IndexType = {
  INDEX_TYPE_VIEW: 0,
  INDEX_TYPE_GSI: 1
};

/**
 * @enum {number}
 */
proto.couchbase.admin.query.v1.IndexState = {
  INDEX_STATE_DEFERRED: 0,
  INDEX_STATE_BUILDING: 1,
  INDEX_STATE_PENDING: 2,
  INDEX_STATE_ONLINE: 3,
  INDEX_STATE_OFFLINE: 4,
  INDEX_STATE_ABRIDGED: 5,
  INDEX_STATE_SCHEDULED: 6
};

goog.object.extend(exports, proto.couchbase.admin.query.v1);
