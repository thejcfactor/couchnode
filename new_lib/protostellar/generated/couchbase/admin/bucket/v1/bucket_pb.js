// source: couchbase/admin/bucket/v1/bucket.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var couchbase_kv_v1_kv_pb = require('../../../../couchbase/kv/v1/kv_pb.js');
goog.object.extend(proto, couchbase_kv_v1_kv_pb);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.BucketType', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.CompressionMode', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.ConflictResolutionType', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.CreateBucketRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.CreateBucketResponse', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.DeleteBucketRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.DeleteBucketResponse', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.EvictionMode', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.ListBucketsRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.ListBucketsResponse', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.StorageBackend', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.UpdateBucketRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.bucket.v1.UpdateBucketResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.bucket.v1.ListBucketsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.bucket.v1.ListBucketsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.bucket.v1.ListBucketsRequest.displayName = 'proto.couchbase.admin.bucket.v1.ListBucketsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.admin.bucket.v1.ListBucketsResponse.repeatedFields_, null);
};
goog.inherits(proto.couchbase.admin.bucket.v1.ListBucketsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.bucket.v1.ListBucketsResponse.displayName = 'proto.couchbase.admin.bucket.v1.ListBucketsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.displayName = 'proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.bucket.v1.CreateBucketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.bucket.v1.CreateBucketRequest.displayName = 'proto.couchbase.admin.bucket.v1.CreateBucketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.bucket.v1.CreateBucketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.bucket.v1.CreateBucketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.bucket.v1.CreateBucketResponse.displayName = 'proto.couchbase.admin.bucket.v1.CreateBucketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.bucket.v1.UpdateBucketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.bucket.v1.UpdateBucketRequest.displayName = 'proto.couchbase.admin.bucket.v1.UpdateBucketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.bucket.v1.UpdateBucketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.bucket.v1.UpdateBucketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.bucket.v1.UpdateBucketResponse.displayName = 'proto.couchbase.admin.bucket.v1.UpdateBucketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.bucket.v1.DeleteBucketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.bucket.v1.DeleteBucketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.bucket.v1.DeleteBucketRequest.displayName = 'proto.couchbase.admin.bucket.v1.DeleteBucketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.bucket.v1.DeleteBucketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.bucket.v1.DeleteBucketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.bucket.v1.DeleteBucketResponse.displayName = 'proto.couchbase.admin.bucket.v1.DeleteBucketResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.bucket.v1.ListBucketsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.bucket.v1.ListBucketsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.bucket.v1.ListBucketsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.ListBucketsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsRequest}
 */
proto.couchbase.admin.bucket.v1.ListBucketsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.bucket.v1.ListBucketsRequest;
  return proto.couchbase.admin.bucket.v1.ListBucketsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.bucket.v1.ListBucketsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsRequest}
 */
proto.couchbase.admin.bucket.v1.ListBucketsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.bucket.v1.ListBucketsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.bucket.v1.ListBucketsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.bucket.v1.ListBucketsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.ListBucketsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.bucket.v1.ListBucketsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.bucket.v1.ListBucketsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketsList: jspb.Message.toObjectList(msg.getBucketsList(),
    proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.bucket.v1.ListBucketsResponse;
  return proto.couchbase.admin.bucket.v1.ListBucketsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.bucket.v1.ListBucketsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket;
      reader.readMessage(value,proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.deserializeBinaryFromReader);
      msg.addBuckets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.bucket.v1.ListBucketsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.bucket.v1.ListBucketsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    flushEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    ramQuotaBytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numReplicas: jspb.Message.getFieldWithDefault(msg, 4, 0),
    replicaIndexes: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    bucketType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    evictionMode: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxExpirySecs: jspb.Message.getFieldWithDefault(msg, 8, 0),
    compressionMode: jspb.Message.getFieldWithDefault(msg, 9, 0),
    minimumDurabilityLevel: jspb.Message.getFieldWithDefault(msg, 10, 0),
    storageBackend: jspb.Message.getFieldWithDefault(msg, 11, 0),
    conflictResolutionType: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket;
  return proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlushEnabled(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRamQuotaBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumReplicas(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReplicaIndexes(value);
      break;
    case 6:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.BucketType} */ (reader.readEnum());
      msg.setBucketType(value);
      break;
    case 7:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.EvictionMode} */ (reader.readEnum());
      msg.setEvictionMode(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxExpirySecs(value);
      break;
    case 9:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.CompressionMode} */ (reader.readEnum());
      msg.setCompressionMode(value);
      break;
    case 10:
      var value = /** @type {!proto.couchbase.kv.v1.DurabilityLevel} */ (reader.readEnum());
      msg.setMinimumDurabilityLevel(value);
      break;
    case 11:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.StorageBackend} */ (reader.readEnum());
      msg.setStorageBackend(value);
      break;
    case 12:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.ConflictResolutionType} */ (reader.readEnum());
      msg.setConflictResolutionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFlushEnabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRamQuotaBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNumReplicas();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getReplicaIndexes();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getBucketType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getEvictionMode();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getMaxExpirySecs();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getCompressionMode();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getMinimumDurabilityLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getStorageBackend();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getConflictResolutionType();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool flush_enabled = 2;
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.getFlushEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.setFlushEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint64 ram_quota_bytes = 3;
 * @return {number}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.getRamQuotaBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.setRamQuotaBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 num_replicas = 4;
 * @return {number}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.getNumReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.setNumReplicas = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool replica_indexes = 5;
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.getReplicaIndexes = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.setReplicaIndexes = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional BucketType bucket_type = 6;
 * @return {!proto.couchbase.admin.bucket.v1.BucketType}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.getBucketType = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.BucketType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.BucketType} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.setBucketType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional EvictionMode eviction_mode = 7;
 * @return {!proto.couchbase.admin.bucket.v1.EvictionMode}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.getEvictionMode = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.EvictionMode} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.EvictionMode} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.setEvictionMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional uint32 max_expiry_secs = 8;
 * @return {number}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.getMaxExpirySecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.setMaxExpirySecs = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional CompressionMode compression_mode = 9;
 * @return {!proto.couchbase.admin.bucket.v1.CompressionMode}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.getCompressionMode = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.CompressionMode} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.CompressionMode} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.setCompressionMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional couchbase.kv.v1.DurabilityLevel minimum_durability_level = 10;
 * @return {!proto.couchbase.kv.v1.DurabilityLevel}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.getMinimumDurabilityLevel = function() {
  return /** @type {!proto.couchbase.kv.v1.DurabilityLevel} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.couchbase.kv.v1.DurabilityLevel} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.setMinimumDurabilityLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional StorageBackend storage_backend = 11;
 * @return {!proto.couchbase.admin.bucket.v1.StorageBackend}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.getStorageBackend = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.StorageBackend} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.StorageBackend} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.setStorageBackend = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional ConflictResolutionType conflict_resolution_type = 12;
 * @return {!proto.couchbase.admin.bucket.v1.ConflictResolutionType}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.getConflictResolutionType = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.ConflictResolutionType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.ConflictResolutionType} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket.prototype.setConflictResolutionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * repeated Bucket buckets = 1;
 * @return {!Array<!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket>}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.prototype.getBucketsList = function() {
  return /** @type{!Array<!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket, 1));
};


/**
 * @param {!Array<!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket>} value
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse} returns this
*/
proto.couchbase.admin.bucket.v1.ListBucketsResponse.prototype.setBucketsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket}
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.prototype.addBuckets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.couchbase.admin.bucket.v1.ListBucketsResponse.Bucket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.admin.bucket.v1.ListBucketsResponse} returns this
 */
proto.couchbase.admin.bucket.v1.ListBucketsResponse.prototype.clearBucketsList = function() {
  return this.setBucketsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.bucket.v1.CreateBucketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bucketType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ramQuotaBytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numReplicas: jspb.Message.getFieldWithDefault(msg, 4, 0),
    flushEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    replicaIndexes: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    evictionMode: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxExpirySecs: jspb.Message.getFieldWithDefault(msg, 8, 0),
    compressionMode: jspb.Message.getFieldWithDefault(msg, 9, 0),
    minimumDurabilityLevel: jspb.Message.getFieldWithDefault(msg, 10, 0),
    storageBackend: jspb.Message.getFieldWithDefault(msg, 11, 0),
    conflictResolutionType: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.bucket.v1.CreateBucketRequest;
  return proto.couchbase.admin.bucket.v1.CreateBucketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.BucketType} */ (reader.readEnum());
      msg.setBucketType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRamQuotaBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumReplicas(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlushEnabled(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReplicaIndexes(value);
      break;
    case 7:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.EvictionMode} */ (reader.readEnum());
      msg.setEvictionMode(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxExpirySecs(value);
      break;
    case 9:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.CompressionMode} */ (reader.readEnum());
      msg.setCompressionMode(value);
      break;
    case 10:
      var value = /** @type {!proto.couchbase.kv.v1.DurabilityLevel} */ (reader.readEnum());
      msg.setMinimumDurabilityLevel(value);
      break;
    case 11:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.StorageBackend} */ (reader.readEnum());
      msg.setStorageBackend(value);
      break;
    case 12:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.ConflictResolutionType} */ (reader.readEnum());
      msg.setConflictResolutionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.bucket.v1.CreateBucketRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBucketType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRamQuotaBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNumReplicas();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {!proto.couchbase.admin.bucket.v1.EvictionMode} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {!proto.couchbase.admin.bucket.v1.CompressionMode} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = /** @type {!proto.couchbase.kv.v1.DurabilityLevel} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = /** @type {!proto.couchbase.admin.bucket.v1.StorageBackend} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = /** @type {!proto.couchbase.admin.bucket.v1.ConflictResolutionType} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BucketType bucket_type = 2;
 * @return {!proto.couchbase.admin.bucket.v1.BucketType}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.getBucketType = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.BucketType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.BucketType} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.setBucketType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint64 ram_quota_bytes = 3;
 * @return {number}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.getRamQuotaBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.setRamQuotaBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 num_replicas = 4;
 * @return {number}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.getNumReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.setNumReplicas = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool flush_enabled = 5;
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.getFlushEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.setFlushEnabled = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.clearFlushEnabled = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.hasFlushEnabled = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool replica_indexes = 6;
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.getReplicaIndexes = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.setReplicaIndexes = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.clearReplicaIndexes = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.hasReplicaIndexes = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EvictionMode eviction_mode = 7;
 * @return {!proto.couchbase.admin.bucket.v1.EvictionMode}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.getEvictionMode = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.EvictionMode} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.EvictionMode} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.setEvictionMode = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.clearEvictionMode = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.hasEvictionMode = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 max_expiry_secs = 8;
 * @return {number}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.getMaxExpirySecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.setMaxExpirySecs = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.clearMaxExpirySecs = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.hasMaxExpirySecs = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CompressionMode compression_mode = 9;
 * @return {!proto.couchbase.admin.bucket.v1.CompressionMode}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.getCompressionMode = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.CompressionMode} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.CompressionMode} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.setCompressionMode = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.clearCompressionMode = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.hasCompressionMode = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional couchbase.kv.v1.DurabilityLevel minimum_durability_level = 10;
 * @return {!proto.couchbase.kv.v1.DurabilityLevel}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.getMinimumDurabilityLevel = function() {
  return /** @type {!proto.couchbase.kv.v1.DurabilityLevel} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.couchbase.kv.v1.DurabilityLevel} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.setMinimumDurabilityLevel = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.clearMinimumDurabilityLevel = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.hasMinimumDurabilityLevel = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional StorageBackend storage_backend = 11;
 * @return {!proto.couchbase.admin.bucket.v1.StorageBackend}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.getStorageBackend = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.StorageBackend} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.StorageBackend} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.setStorageBackend = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.clearStorageBackend = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.hasStorageBackend = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ConflictResolutionType conflict_resolution_type = 12;
 * @return {!proto.couchbase.admin.bucket.v1.ConflictResolutionType}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.getConflictResolutionType = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.ConflictResolutionType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.ConflictResolutionType} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.setConflictResolutionType = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.clearConflictResolutionType = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.CreateBucketRequest.prototype.hasConflictResolutionType = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.bucket.v1.CreateBucketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.bucket.v1.CreateBucketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.bucket.v1.CreateBucketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.CreateBucketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketUuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketResponse}
 */
proto.couchbase.admin.bucket.v1.CreateBucketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.bucket.v1.CreateBucketResponse;
  return proto.couchbase.admin.bucket.v1.CreateBucketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.bucket.v1.CreateBucketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketResponse}
 */
proto.couchbase.admin.bucket.v1.CreateBucketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.bucket.v1.CreateBucketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.bucket.v1.CreateBucketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.bucket.v1.CreateBucketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.CreateBucketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string bucket_uuid = 1;
 * @return {string}
 */
proto.couchbase.admin.bucket.v1.CreateBucketResponse.prototype.getBucketUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.bucket.v1.CreateBucketResponse} returns this
 */
proto.couchbase.admin.bucket.v1.CreateBucketResponse.prototype.setBucketUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.bucket.v1.UpdateBucketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ramQuotaBytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numReplicas: jspb.Message.getFieldWithDefault(msg, 4, 0),
    flushEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    replicaIndexes: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    evictionMode: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxExpirySecs: jspb.Message.getFieldWithDefault(msg, 8, 0),
    compressionMode: jspb.Message.getFieldWithDefault(msg, 9, 0),
    minimumDurabilityLevel: jspb.Message.getFieldWithDefault(msg, 10, 0),
    conflictResolutionType: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.bucket.v1.UpdateBucketRequest;
  return proto.couchbase.admin.bucket.v1.UpdateBucketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRamQuotaBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumReplicas(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlushEnabled(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReplicaIndexes(value);
      break;
    case 7:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.EvictionMode} */ (reader.readEnum());
      msg.setEvictionMode(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxExpirySecs(value);
      break;
    case 9:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.CompressionMode} */ (reader.readEnum());
      msg.setCompressionMode(value);
      break;
    case 10:
      var value = /** @type {!proto.couchbase.kv.v1.DurabilityLevel} */ (reader.readEnum());
      msg.setMinimumDurabilityLevel(value);
      break;
    case 12:
      var value = /** @type {!proto.couchbase.admin.bucket.v1.ConflictResolutionType} */ (reader.readEnum());
      msg.setConflictResolutionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.bucket.v1.UpdateBucketRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {!proto.couchbase.admin.bucket.v1.EvictionMode} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {!proto.couchbase.admin.bucket.v1.CompressionMode} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = /** @type {!proto.couchbase.kv.v1.DurabilityLevel} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = /** @type {!proto.couchbase.admin.bucket.v1.ConflictResolutionType} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 ram_quota_bytes = 3;
 * @return {number}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.getRamQuotaBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.setRamQuotaBytes = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.clearRamQuotaBytes = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.hasRamQuotaBytes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 num_replicas = 4;
 * @return {number}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.getNumReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.setNumReplicas = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.clearNumReplicas = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.hasNumReplicas = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool flush_enabled = 5;
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.getFlushEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.setFlushEnabled = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.clearFlushEnabled = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.hasFlushEnabled = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool replica_indexes = 6;
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.getReplicaIndexes = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.setReplicaIndexes = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.clearReplicaIndexes = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.hasReplicaIndexes = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EvictionMode eviction_mode = 7;
 * @return {!proto.couchbase.admin.bucket.v1.EvictionMode}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.getEvictionMode = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.EvictionMode} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.EvictionMode} value
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.setEvictionMode = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.clearEvictionMode = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.hasEvictionMode = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 max_expiry_secs = 8;
 * @return {number}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.getMaxExpirySecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.setMaxExpirySecs = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.clearMaxExpirySecs = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.hasMaxExpirySecs = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CompressionMode compression_mode = 9;
 * @return {!proto.couchbase.admin.bucket.v1.CompressionMode}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.getCompressionMode = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.CompressionMode} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.CompressionMode} value
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.setCompressionMode = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.clearCompressionMode = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.hasCompressionMode = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional couchbase.kv.v1.DurabilityLevel minimum_durability_level = 10;
 * @return {!proto.couchbase.kv.v1.DurabilityLevel}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.getMinimumDurabilityLevel = function() {
  return /** @type {!proto.couchbase.kv.v1.DurabilityLevel} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.couchbase.kv.v1.DurabilityLevel} value
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.setMinimumDurabilityLevel = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.clearMinimumDurabilityLevel = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.hasMinimumDurabilityLevel = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ConflictResolutionType conflict_resolution_type = 12;
 * @return {!proto.couchbase.admin.bucket.v1.ConflictResolutionType}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.getConflictResolutionType = function() {
  return /** @type {!proto.couchbase.admin.bucket.v1.ConflictResolutionType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.couchbase.admin.bucket.v1.ConflictResolutionType} value
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.setConflictResolutionType = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.clearConflictResolutionType = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketRequest.prototype.hasConflictResolutionType = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.bucket.v1.UpdateBucketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.bucket.v1.UpdateBucketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.UpdateBucketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketResponse}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.bucket.v1.UpdateBucketResponse;
  return proto.couchbase.admin.bucket.v1.UpdateBucketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.bucket.v1.UpdateBucketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.bucket.v1.UpdateBucketResponse}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.bucket.v1.UpdateBucketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.bucket.v1.UpdateBucketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.bucket.v1.UpdateBucketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.UpdateBucketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.bucket.v1.DeleteBucketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.bucket.v1.DeleteBucketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.bucket.v1.DeleteBucketRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.DeleteBucketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.bucket.v1.DeleteBucketRequest}
 */
proto.couchbase.admin.bucket.v1.DeleteBucketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.bucket.v1.DeleteBucketRequest;
  return proto.couchbase.admin.bucket.v1.DeleteBucketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.bucket.v1.DeleteBucketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.bucket.v1.DeleteBucketRequest}
 */
proto.couchbase.admin.bucket.v1.DeleteBucketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.bucket.v1.DeleteBucketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.bucket.v1.DeleteBucketRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.bucket.v1.DeleteBucketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.DeleteBucketRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.admin.bucket.v1.DeleteBucketRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.bucket.v1.DeleteBucketRequest} returns this
 */
proto.couchbase.admin.bucket.v1.DeleteBucketRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.bucket.v1.DeleteBucketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.bucket.v1.DeleteBucketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.bucket.v1.DeleteBucketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.DeleteBucketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.bucket.v1.DeleteBucketResponse}
 */
proto.couchbase.admin.bucket.v1.DeleteBucketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.bucket.v1.DeleteBucketResponse;
  return proto.couchbase.admin.bucket.v1.DeleteBucketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.bucket.v1.DeleteBucketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.bucket.v1.DeleteBucketResponse}
 */
proto.couchbase.admin.bucket.v1.DeleteBucketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.bucket.v1.DeleteBucketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.bucket.v1.DeleteBucketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.bucket.v1.DeleteBucketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.bucket.v1.DeleteBucketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.couchbase.admin.bucket.v1.BucketType = {
  BUCKET_TYPE_COUCHBASE: 0,
  BUCKET_TYPE_MEMCACHED: 1,
  BUCKET_TYPE_EPHEMERAL: 2
};

/**
 * @enum {number}
 */
proto.couchbase.admin.bucket.v1.EvictionMode = {
  EVICTION_MODE_FULL: 0,
  EVICTION_MODE_NOT_RECENTLY_USED: 1,
  EVICTION_MODE_VALUE_ONLY: 2,
  EVICTION_MODE_NONE: 3
};

/**
 * @enum {number}
 */
proto.couchbase.admin.bucket.v1.CompressionMode = {
  COMPRESSION_MODE_OFF: 0,
  COMPRESSION_MODE_PASSIVE: 1,
  COMPRESSION_MODE_ACTIVE: 2
};

/**
 * @enum {number}
 */
proto.couchbase.admin.bucket.v1.StorageBackend = {
  STORAGE_BACKEND_COUCHSTORE: 0,
  STORAGE_BACKEND_MAGMA: 1
};

/**
 * @enum {number}
 */
proto.couchbase.admin.bucket.v1.ConflictResolutionType = {
  CONFLICT_RESOLUTION_TYPE_TIMESTAMP: 0,
  CONFLICT_RESOLUTION_TYPE_SEQUENCE_NUMBER: 1,
  CONFLICT_RESOLUTION_TYPE_CUSTOM: 2
};

goog.object.extend(exports, proto.couchbase.admin.bucket.v1);
