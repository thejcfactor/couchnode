// source: couchbase/admin/search/v1/search.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.couchbase.admin.search.v1.DeleteIndexRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.search.v1.DeleteIndexResponse', null, global);
goog.exportSymbol('proto.couchbase.admin.search.v1.GetIndexRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.search.v1.GetIndexResponse', null, global);
goog.exportSymbol('proto.couchbase.admin.search.v1.ListIndexesRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.search.v1.ListIndexesResponse', null, global);
goog.exportSymbol('proto.couchbase.admin.search.v1.ListIndexesResponse.Index', null, global);
goog.exportSymbol('proto.couchbase.admin.search.v1.UpsertIndexRequest', null, global);
goog.exportSymbol('proto.couchbase.admin.search.v1.UpsertIndexResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.search.v1.UpsertIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.search.v1.UpsertIndexRequest.displayName = 'proto.couchbase.admin.search.v1.UpsertIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.search.v1.UpsertIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.search.v1.UpsertIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.search.v1.UpsertIndexResponse.displayName = 'proto.couchbase.admin.search.v1.UpsertIndexResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.search.v1.GetIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.search.v1.GetIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.search.v1.GetIndexRequest.displayName = 'proto.couchbase.admin.search.v1.GetIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.search.v1.GetIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.search.v1.GetIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.search.v1.GetIndexResponse.displayName = 'proto.couchbase.admin.search.v1.GetIndexResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.search.v1.ListIndexesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.search.v1.ListIndexesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.search.v1.ListIndexesRequest.displayName = 'proto.couchbase.admin.search.v1.ListIndexesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.search.v1.ListIndexesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.admin.search.v1.ListIndexesResponse.repeatedFields_, null);
};
goog.inherits(proto.couchbase.admin.search.v1.ListIndexesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.search.v1.ListIndexesResponse.displayName = 'proto.couchbase.admin.search.v1.ListIndexesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.search.v1.ListIndexesResponse.Index, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.search.v1.ListIndexesResponse.Index.displayName = 'proto.couchbase.admin.search.v1.ListIndexesResponse.Index';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.search.v1.DeleteIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.search.v1.DeleteIndexRequest.displayName = 'proto.couchbase.admin.search.v1.DeleteIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.admin.search.v1.DeleteIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.admin.search.v1.DeleteIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.admin.search.v1.DeleteIndexResponse.displayName = 'proto.couchbase.admin.search.v1.DeleteIndexResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.search.v1.UpsertIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.search.v1.UpsertIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paramsMap: (f = msg.getParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    planParamsMap: (f = msg.getPlanParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    prevIndexUuid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sourceName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sourceParamsMap: (f = msg.getSourceParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    sourceType: jspb.Message.getFieldWithDefault(msg, 7, ""),
    sourceUuid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    type: jspb.Message.getFieldWithDefault(msg, 9, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    bucketName: jspb.Message.getFieldWithDefault(msg, 11, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.search.v1.UpsertIndexRequest;
  return proto.couchbase.admin.search.v1.UpsertIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.search.v1.UpsertIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 3:
      var value = msg.getPlanParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrevIndexUuid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceName(value);
      break;
    case 6:
      var value = msg.getSourceParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceUuid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.search.v1.UpsertIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.search.v1.UpsertIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getPlanParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSourceParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, bytes> params = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.getParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.clearParamsMap = function() {
  this.getParamsMap().clear();
  return this;};


/**
 * map<string, bytes> plan_params = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.getPlanParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.clearPlanParamsMap = function() {
  this.getPlanParamsMap().clear();
  return this;};


/**
 * optional string prev_index_uuid = 4;
 * @return {string}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.getPrevIndexUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.setPrevIndexUuid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.clearPrevIndexUuid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.hasPrevIndexUuid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string source_name = 5;
 * @return {string}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.getSourceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.setSourceName = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.clearSourceName = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.hasSourceName = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<string, bytes> source_params = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.getSourceParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.clearSourceParamsMap = function() {
  this.getSourceParamsMap().clear();
  return this;};


/**
 * optional string source_type = 7;
 * @return {string}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.getSourceType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.setSourceType = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.clearSourceType = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.hasSourceType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string source_uuid = 8;
 * @return {string}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.getSourceUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.setSourceUuid = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.clearSourceUuid = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.hasSourceUuid = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string type = 9;
 * @return {string}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string uuid = 10;
 * @return {string}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.setUuid = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.clearUuid = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string bucket_name = 11;
 * @return {string}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.clearBucketName = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.hasBucketName = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string scope_name = 12;
 * @return {string}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.clearScopeName = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.UpsertIndexRequest.prototype.hasScopeName = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.search.v1.UpsertIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.search.v1.UpsertIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.search.v1.UpsertIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.UpsertIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexResponse}
 */
proto.couchbase.admin.search.v1.UpsertIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.search.v1.UpsertIndexResponse;
  return proto.couchbase.admin.search.v1.UpsertIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.search.v1.UpsertIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.search.v1.UpsertIndexResponse}
 */
proto.couchbase.admin.search.v1.UpsertIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.search.v1.UpsertIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.search.v1.UpsertIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.search.v1.UpsertIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.UpsertIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.search.v1.GetIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.search.v1.GetIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.search.v1.GetIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.GetIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bucketName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.search.v1.GetIndexRequest}
 */
proto.couchbase.admin.search.v1.GetIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.search.v1.GetIndexRequest;
  return proto.couchbase.admin.search.v1.GetIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.search.v1.GetIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.search.v1.GetIndexRequest}
 */
proto.couchbase.admin.search.v1.GetIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.search.v1.GetIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.search.v1.GetIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.search.v1.GetIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.GetIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.couchbase.admin.search.v1.GetIndexRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.GetIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.GetIndexRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string bucket_name = 2;
 * @return {string}
 */
proto.couchbase.admin.search.v1.GetIndexRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.GetIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.GetIndexRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.GetIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.GetIndexRequest.prototype.clearBucketName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.GetIndexRequest.prototype.hasBucketName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string scope_name = 3;
 * @return {string}
 */
proto.couchbase.admin.search.v1.GetIndexRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.GetIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.GetIndexRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.GetIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.GetIndexRequest.prototype.clearScopeName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.GetIndexRequest.prototype.hasScopeName = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.search.v1.GetIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.search.v1.GetIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.GetIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paramsMap: (f = msg.getParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    planParamsMap: (f = msg.getPlanParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    sourceName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sourceParamsMap: (f = msg.getSourceParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    sourceType: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sourceUuid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.search.v1.GetIndexResponse;
  return proto.couchbase.admin.search.v1.GetIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.search.v1.GetIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 3:
      var value = msg.getPlanParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceName(value);
      break;
    case 5:
      var value = msg.getSourceParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceUuid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.search.v1.GetIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.search.v1.GetIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.GetIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getPlanParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSourceParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, bytes> params = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.getParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.clearParamsMap = function() {
  this.getParamsMap().clear();
  return this;};


/**
 * map<string, bytes> plan_params = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.getPlanParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.clearPlanParamsMap = function() {
  this.getPlanParamsMap().clear();
  return this;};


/**
 * optional string source_name = 4;
 * @return {string}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.getSourceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.setSourceName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.clearSourceName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.hasSourceName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<string, bytes> source_params = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.getSourceParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.clearSourceParamsMap = function() {
  this.getSourceParamsMap().clear();
  return this;};


/**
 * optional string source_type = 6;
 * @return {string}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.getSourceType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.setSourceType = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.clearSourceType = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.hasSourceType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string source_uuid = 7;
 * @return {string}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.getSourceUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.setSourceUuid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.clearSourceUuid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.hasSourceUuid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string type = 8;
 * @return {string}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string uuid = 9;
 * @return {string}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.setUuid = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.GetIndexResponse} returns this
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.clearUuid = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.GetIndexResponse.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.search.v1.ListIndexesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.search.v1.ListIndexesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesRequest}
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.search.v1.ListIndexesRequest;
  return proto.couchbase.admin.search.v1.ListIndexesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.search.v1.ListIndexesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesRequest}
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.search.v1.ListIndexesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.search.v1.ListIndexesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.ListIndexesRequest} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesRequest} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.prototype.clearBucketName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.prototype.hasBucketName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string scope_name = 2;
 * @return {string}
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.ListIndexesRequest} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesRequest} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.prototype.clearScopeName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.ListIndexesRequest.prototype.hasScopeName = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.search.v1.ListIndexesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.search.v1.ListIndexesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    proto.couchbase.admin.search.v1.ListIndexesResponse.Index.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.search.v1.ListIndexesResponse;
  return proto.couchbase.admin.search.v1.ListIndexesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.search.v1.ListIndexesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.couchbase.admin.search.v1.ListIndexesResponse.Index;
      reader.readMessage(value,proto.couchbase.admin.search.v1.ListIndexesResponse.Index.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.search.v1.ListIndexesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.search.v1.ListIndexesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.couchbase.admin.search.v1.ListIndexesResponse.Index.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.search.v1.ListIndexesResponse.Index.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paramsMap: (f = msg.getParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    planParamsMap: (f = msg.getPlanParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    sourceName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sourceParamsMap: (f = msg.getSourceParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    sourceType: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sourceUuid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.search.v1.ListIndexesResponse.Index;
  return proto.couchbase.admin.search.v1.ListIndexesResponse.Index.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 3:
      var value = msg.getPlanParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceName(value);
      break;
    case 5:
      var value = msg.getSourceParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceUuid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.search.v1.ListIndexesResponse.Index.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getPlanParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSourceParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, bytes> params = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.getParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.clearParamsMap = function() {
  this.getParamsMap().clear();
  return this;};


/**
 * map<string, bytes> plan_params = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.getPlanParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.clearPlanParamsMap = function() {
  this.getPlanParamsMap().clear();
  return this;};


/**
 * optional string source_name = 4;
 * @return {string}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.getSourceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.setSourceName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.clearSourceName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.hasSourceName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<string, bytes> source_params = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.getSourceParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.clearSourceParamsMap = function() {
  this.getSourceParamsMap().clear();
  return this;};


/**
 * optional string source_type = 6;
 * @return {string}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.getSourceType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.setSourceType = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.clearSourceType = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.hasSourceType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string source_uuid = 7;
 * @return {string}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.getSourceUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.setSourceUuid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.clearSourceUuid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.hasSourceUuid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string type = 8;
 * @return {string}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string uuid = 9;
 * @return {string}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.setUuid = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.clearUuid = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.Index.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated Index indexes = 1;
 * @return {!Array<!proto.couchbase.admin.search.v1.ListIndexesResponse.Index>}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.couchbase.admin.search.v1.ListIndexesResponse.Index>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.admin.search.v1.ListIndexesResponse.Index, 1));
};


/**
 * @param {!Array<!proto.couchbase.admin.search.v1.ListIndexesResponse.Index>} value
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse} returns this
*/
proto.couchbase.admin.search.v1.ListIndexesResponse.prototype.setIndexesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse.Index}
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.couchbase.admin.search.v1.ListIndexesResponse.Index, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.admin.search.v1.ListIndexesResponse} returns this
 */
proto.couchbase.admin.search.v1.ListIndexesResponse.prototype.clearIndexesList = function() {
  return this.setIndexesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.search.v1.DeleteIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.search.v1.DeleteIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bucketName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.search.v1.DeleteIndexRequest}
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.search.v1.DeleteIndexRequest;
  return proto.couchbase.admin.search.v1.DeleteIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.search.v1.DeleteIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.search.v1.DeleteIndexRequest}
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.search.v1.DeleteIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.search.v1.DeleteIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.DeleteIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string bucket_name = 2;
 * @return {string}
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.DeleteIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.DeleteIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.prototype.clearBucketName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.prototype.hasBucketName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string scope_name = 3;
 * @return {string}
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.admin.search.v1.DeleteIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.admin.search.v1.DeleteIndexRequest} returns this
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.prototype.clearScopeName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.admin.search.v1.DeleteIndexRequest.prototype.hasScopeName = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.admin.search.v1.DeleteIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.admin.search.v1.DeleteIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.admin.search.v1.DeleteIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.DeleteIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.admin.search.v1.DeleteIndexResponse}
 */
proto.couchbase.admin.search.v1.DeleteIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.admin.search.v1.DeleteIndexResponse;
  return proto.couchbase.admin.search.v1.DeleteIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.admin.search.v1.DeleteIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.admin.search.v1.DeleteIndexResponse}
 */
proto.couchbase.admin.search.v1.DeleteIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.admin.search.v1.DeleteIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.admin.search.v1.DeleteIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.admin.search.v1.DeleteIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.admin.search.v1.DeleteIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.couchbase.admin.search.v1);
