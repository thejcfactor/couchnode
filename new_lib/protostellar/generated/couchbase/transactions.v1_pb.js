// source: couchbase/transactions.v1.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.couchbase.transactions.v1.TransactionBeginAttemptRequest', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionBeginAttemptResponse', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionCommitRequest', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionCommitResponse', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionGetRequest', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionGetResponse', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionInsertRequest', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionInsertResponse', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionRemoveRequest', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionRemoveResponse', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionReplaceRequest', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionReplaceResponse', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionRollbackRequest', null, global);
goog.exportSymbol('proto.couchbase.transactions.v1.TransactionRollbackResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionBeginAttemptRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.displayName = 'proto.couchbase.transactions.v1.TransactionBeginAttemptRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionBeginAttemptResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.displayName = 'proto.couchbase.transactions.v1.TransactionBeginAttemptResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionCommitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionCommitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionCommitRequest.displayName = 'proto.couchbase.transactions.v1.TransactionCommitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionCommitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionCommitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionCommitResponse.displayName = 'proto.couchbase.transactions.v1.TransactionCommitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionRollbackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionRollbackRequest.displayName = 'proto.couchbase.transactions.v1.TransactionRollbackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionRollbackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionRollbackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionRollbackResponse.displayName = 'proto.couchbase.transactions.v1.TransactionRollbackResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionGetRequest.displayName = 'proto.couchbase.transactions.v1.TransactionGetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionGetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionGetResponse.displayName = 'proto.couchbase.transactions.v1.TransactionGetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionInsertRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionInsertRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionInsertRequest.displayName = 'proto.couchbase.transactions.v1.TransactionInsertRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionInsertResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionInsertResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionInsertResponse.displayName = 'proto.couchbase.transactions.v1.TransactionInsertResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionReplaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionReplaceRequest.displayName = 'proto.couchbase.transactions.v1.TransactionReplaceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionReplaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionReplaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionReplaceResponse.displayName = 'proto.couchbase.transactions.v1.TransactionReplaceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionRemoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionRemoveRequest.displayName = 'proto.couchbase.transactions.v1.TransactionRemoveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.transactions.v1.TransactionRemoveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.transactions.v1.TransactionRemoveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.transactions.v1.TransactionRemoveResponse.displayName = 'proto.couchbase.transactions.v1.TransactionRemoveResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionBeginAttemptRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transactionId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionBeginAttemptRequest}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionBeginAttemptRequest;
  return proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionBeginAttemptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionBeginAttemptRequest}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionBeginAttemptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionBeginAttemptRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string transaction_id = 2;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionBeginAttemptRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.prototype.setTransactionId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.transactions.v1.TransactionBeginAttemptRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.prototype.clearTransactionId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptRequest.prototype.hasTransactionId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionBeginAttemptResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    attemptId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionBeginAttemptResponse}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionBeginAttemptResponse;
  return proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionBeginAttemptResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionBeginAttemptResponse}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttemptId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionBeginAttemptResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAttemptId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string transaction_id = 1;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionBeginAttemptResponse} returns this
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string attempt_id = 2;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.prototype.getAttemptId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionBeginAttemptResponse} returns this
 */
proto.couchbase.transactions.v1.TransactionBeginAttemptResponse.prototype.setAttemptId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionCommitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionCommitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionCommitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionCommitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transactionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attemptId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionCommitRequest}
 */
proto.couchbase.transactions.v1.TransactionCommitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionCommitRequest;
  return proto.couchbase.transactions.v1.TransactionCommitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionCommitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionCommitRequest}
 */
proto.couchbase.transactions.v1.TransactionCommitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttemptId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionCommitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionCommitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionCommitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionCommitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttemptId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionCommitRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionCommitRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionCommitRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string transaction_id = 2;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionCommitRequest.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionCommitRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionCommitRequest.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string attempt_id = 3;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionCommitRequest.prototype.getAttemptId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionCommitRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionCommitRequest.prototype.setAttemptId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionCommitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionCommitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionCommitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionCommitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionCommitResponse}
 */
proto.couchbase.transactions.v1.TransactionCommitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionCommitResponse;
  return proto.couchbase.transactions.v1.TransactionCommitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionCommitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionCommitResponse}
 */
proto.couchbase.transactions.v1.TransactionCommitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionCommitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionCommitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionCommitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionCommitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionRollbackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionRollbackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transactionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attemptId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionRollbackRequest}
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionRollbackRequest;
  return proto.couchbase.transactions.v1.TransactionRollbackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionRollbackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionRollbackRequest}
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttemptId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionRollbackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionRollbackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttemptId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionRollbackRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string transaction_id = 2;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionRollbackRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string attempt_id = 3;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest.prototype.getAttemptId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionRollbackRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionRollbackRequest.prototype.setAttemptId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionRollbackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionRollbackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionRollbackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionRollbackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionRollbackResponse}
 */
proto.couchbase.transactions.v1.TransactionRollbackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionRollbackResponse;
  return proto.couchbase.transactions.v1.TransactionRollbackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionRollbackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionRollbackResponse}
 */
proto.couchbase.transactions.v1.TransactionRollbackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionRollbackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionRollbackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionRollbackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionRollbackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionGetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transactionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attemptId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    collectionName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    key: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionGetRequest}
 */
proto.couchbase.transactions.v1.TransactionGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionGetRequest;
  return proto.couchbase.transactions.v1.TransactionGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionGetRequest}
 */
proto.couchbase.transactions.v1.TransactionGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttemptId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttemptId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScopeName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionGetRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string transaction_id = 2;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionGetRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string attempt_id = 3;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.getAttemptId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionGetRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.setAttemptId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string scope_name = 4;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionGetRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string collection_name = 5;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionGetRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string key = 6;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionGetRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionGetRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionGetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionGetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionGetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionGetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cas: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionGetResponse}
 */
proto.couchbase.transactions.v1.TransactionGetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionGetResponse;
  return proto.couchbase.transactions.v1.TransactionGetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionGetResponse}
 */
proto.couchbase.transactions.v1.TransactionGetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCas(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionGetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionGetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionGetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCas();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 cas = 1;
 * @return {number}
 */
proto.couchbase.transactions.v1.TransactionGetResponse.prototype.getCas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.transactions.v1.TransactionGetResponse} returns this
 */
proto.couchbase.transactions.v1.TransactionGetResponse.prototype.setCas = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.couchbase.transactions.v1.TransactionGetResponse.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionGetResponse.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionGetResponse.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.couchbase.transactions.v1.TransactionGetResponse} returns this
 */
proto.couchbase.transactions.v1.TransactionGetResponse.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionInsertRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionInsertRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transactionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attemptId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    collectionName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    key: jspb.Message.getFieldWithDefault(msg, 6, ""),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionInsertRequest}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionInsertRequest;
  return proto.couchbase.transactions.v1.TransactionInsertRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionInsertRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionInsertRequest}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttemptId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionInsertRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionInsertRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttemptId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScopeName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionInsertRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string transaction_id = 2;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionInsertRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string attempt_id = 3;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.getAttemptId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionInsertRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.setAttemptId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string scope_name = 4;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionInsertRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string collection_name = 5;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionInsertRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string key = 6;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionInsertRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes value = 7;
 * @return {!(string|Uint8Array)}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes value = 7;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.couchbase.transactions.v1.TransactionInsertRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionInsertRequest.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionInsertResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionInsertResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionInsertResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionInsertResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cas: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionInsertResponse}
 */
proto.couchbase.transactions.v1.TransactionInsertResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionInsertResponse;
  return proto.couchbase.transactions.v1.TransactionInsertResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionInsertResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionInsertResponse}
 */
proto.couchbase.transactions.v1.TransactionInsertResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionInsertResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionInsertResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionInsertResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionInsertResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCas();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 cas = 1;
 * @return {number}
 */
proto.couchbase.transactions.v1.TransactionInsertResponse.prototype.getCas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.transactions.v1.TransactionInsertResponse} returns this
 */
proto.couchbase.transactions.v1.TransactionInsertResponse.prototype.setCas = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionReplaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionReplaceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transactionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attemptId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    collectionName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    key: jspb.Message.getFieldWithDefault(msg, 6, ""),
    cas: jspb.Message.getFieldWithDefault(msg, 7, 0),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceRequest}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionReplaceRequest;
  return proto.couchbase.transactions.v1.TransactionReplaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionReplaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceRequest}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttemptId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCas(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionReplaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionReplaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttemptId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScopeName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCas();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string transaction_id = 2;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string attempt_id = 3;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.getAttemptId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.setAttemptId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string scope_name = 4;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string collection_name = 5;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string key = 6;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 cas = 7;
 * @return {number}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.getCas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.setCas = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes value = 8;
 * @return {!(string|Uint8Array)}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes value = 8;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionReplaceRequest.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionReplaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionReplaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionReplaceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionReplaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cas: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceResponse}
 */
proto.couchbase.transactions.v1.TransactionReplaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionReplaceResponse;
  return proto.couchbase.transactions.v1.TransactionReplaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionReplaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceResponse}
 */
proto.couchbase.transactions.v1.TransactionReplaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionReplaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionReplaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionReplaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionReplaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCas();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 cas = 1;
 * @return {number}
 */
proto.couchbase.transactions.v1.TransactionReplaceResponse.prototype.getCas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.transactions.v1.TransactionReplaceResponse} returns this
 */
proto.couchbase.transactions.v1.TransactionReplaceResponse.prototype.setCas = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionRemoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionRemoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transactionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attemptId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scopeName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    collectionName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    key: jspb.Message.getFieldWithDefault(msg, 6, ""),
    cas: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionRemoveRequest}
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionRemoveRequest;
  return proto.couchbase.transactions.v1.TransactionRemoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionRemoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionRemoveRequest}
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttemptId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionRemoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionRemoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttemptId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScopeName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCas();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional string bucket_name = 1;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionRemoveRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string transaction_id = 2;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionRemoveRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string attempt_id = 3;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.getAttemptId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionRemoveRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.setAttemptId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string scope_name = 4;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.getScopeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionRemoveRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.setScopeName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string collection_name = 5;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionRemoveRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string key = 6;
 * @return {string}
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.transactions.v1.TransactionRemoveRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 cas = 7;
 * @return {number}
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.getCas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.transactions.v1.TransactionRemoveRequest} returns this
 */
proto.couchbase.transactions.v1.TransactionRemoveRequest.prototype.setCas = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.transactions.v1.TransactionRemoveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.transactions.v1.TransactionRemoveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.transactions.v1.TransactionRemoveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionRemoveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cas: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.transactions.v1.TransactionRemoveResponse}
 */
proto.couchbase.transactions.v1.TransactionRemoveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.transactions.v1.TransactionRemoveResponse;
  return proto.couchbase.transactions.v1.TransactionRemoveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.transactions.v1.TransactionRemoveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.transactions.v1.TransactionRemoveResponse}
 */
proto.couchbase.transactions.v1.TransactionRemoveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.transactions.v1.TransactionRemoveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.transactions.v1.TransactionRemoveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.transactions.v1.TransactionRemoveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.transactions.v1.TransactionRemoveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCas();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 cas = 1;
 * @return {number}
 */
proto.couchbase.transactions.v1.TransactionRemoveResponse.prototype.getCas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.transactions.v1.TransactionRemoveResponse} returns this
 */
proto.couchbase.transactions.v1.TransactionRemoveResponse.prototype.setCas = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


goog.object.extend(exports, proto.couchbase.transactions.v1);
