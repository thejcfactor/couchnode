// source: couchbase/view.v1.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.couchbase.view.v1.ViewQueryRequest', null, global);
goog.exportSymbol('proto.couchbase.view.v1.ViewQueryRequest.DesignDocumentNamespace', null, global);
goog.exportSymbol('proto.couchbase.view.v1.ViewQueryRequest.ErrorMode', null, global);
goog.exportSymbol('proto.couchbase.view.v1.ViewQueryRequest.Order', null, global);
goog.exportSymbol('proto.couchbase.view.v1.ViewQueryRequest.ScanConsistency', null, global);
goog.exportSymbol('proto.couchbase.view.v1.ViewQueryResponse', null, global);
goog.exportSymbol('proto.couchbase.view.v1.ViewQueryResponse.MetaData', null, global);
goog.exportSymbol('proto.couchbase.view.v1.ViewQueryResponse.Row', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.view.v1.ViewQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.view.v1.ViewQueryRequest.repeatedFields_, null);
};
goog.inherits(proto.couchbase.view.v1.ViewQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.view.v1.ViewQueryRequest.displayName = 'proto.couchbase.view.v1.ViewQueryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.view.v1.ViewQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.couchbase.view.v1.ViewQueryResponse.repeatedFields_, null);
};
goog.inherits(proto.couchbase.view.v1.ViewQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.view.v1.ViewQueryResponse.displayName = 'proto.couchbase.view.v1.ViewQueryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.view.v1.ViewQueryResponse.Row = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.view.v1.ViewQueryResponse.Row, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.view.v1.ViewQueryResponse.Row.displayName = 'proto.couchbase.view.v1.ViewQueryResponse.Row';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.couchbase.view.v1.ViewQueryResponse.MetaData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.couchbase.view.v1.ViewQueryResponse.MetaData.displayName = 'proto.couchbase.view.v1.ViewQueryResponse.MetaData';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.view.v1.ViewQueryRequest.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.view.v1.ViewQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.view.v1.ViewQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.view.v1.ViewQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    designDocumentName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    viewName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    skip: jspb.Message.getFieldWithDefault(msg, 3, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    scanConsistency: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reduce: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    group: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    groupLevel: jspb.Message.getFieldWithDefault(msg, 9, 0),
    key: msg.getKey_asB64(),
    keysList: msg.getKeysList_asB64(),
    startKey: msg.getStartKey_asB64(),
    endKey: msg.getEndKey_asB64(),
    inclusiveEnd: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    startKeyDocId: jspb.Message.getFieldWithDefault(msg, 15, ""),
    endKeyDocId: jspb.Message.getFieldWithDefault(msg, 16, ""),
    onError: jspb.Message.getFieldWithDefault(msg, 17, 0),
    debug: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
    namespace: jspb.Message.getFieldWithDefault(msg, 19, 0),
    order: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest}
 */
proto.couchbase.view.v1.ViewQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.view.v1.ViewQueryRequest;
  return proto.couchbase.view.v1.ViewQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.view.v1.ViewQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest}
 */
proto.couchbase.view.v1.ViewQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketName(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesignDocumentName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setViewName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSkip(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {!proto.couchbase.view.v1.ViewQueryRequest.ScanConsistency} */ (reader.readEnum());
      msg.setScanConsistency(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReduce(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGroup(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupLevel(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addKeys(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStartKey(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEndKey(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInclusiveEnd(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartKeyDocId(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndKeyDocId(value);
      break;
    case 17:
      var value = /** @type {!proto.couchbase.view.v1.ViewQueryRequest.ErrorMode} */ (reader.readEnum());
      msg.setOnError(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebug(value);
      break;
    case 19:
      var value = /** @type {!proto.couchbase.view.v1.ViewQueryRequest.DesignDocumentNamespace} */ (reader.readEnum());
      msg.setNamespace(value);
      break;
    case 20:
      var value = /** @type {!proto.couchbase.view.v1.ViewQueryRequest.Order} */ (reader.readEnum());
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.view.v1.ViewQueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.view.v1.ViewQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.view.v1.ViewQueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDesignDocumentName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getViewName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {!proto.couchbase.view.v1.ViewQueryRequest.ScanConsistency} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getKeysList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      11,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {!proto.couchbase.view.v1.ViewQueryRequest.ErrorMode} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {!proto.couchbase.view.v1.ViewQueryRequest.DesignDocumentNamespace} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = /** @type {!proto.couchbase.view.v1.ViewQueryRequest.Order} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeEnum(
      20,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.couchbase.view.v1.ViewQueryRequest.ScanConsistency = {
  NOT_BOUNDED: 0,
  REQUEST_PLUS: 1,
  UPDATE_AFTER: 2
};

/**
 * @enum {number}
 */
proto.couchbase.view.v1.ViewQueryRequest.ErrorMode = {
  CONTINUE: 0,
  STOP: 1
};

/**
 * @enum {number}
 */
proto.couchbase.view.v1.ViewQueryRequest.DesignDocumentNamespace = {
  PRODUCTION: 0,
  DEVELOPMENT: 1
};

/**
 * @enum {number}
 */
proto.couchbase.view.v1.ViewQueryRequest.Order = {
  ASCENDING: 0,
  DESCENDING: 1
};

/**
 * optional string bucket_name = 8;
 * @return {string}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string design_document_name = 1;
 * @return {string}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getDesignDocumentName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setDesignDocumentName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string view_name = 2;
 * @return {string}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getViewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setViewName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 skip = 3;
 * @return {number}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setSkip = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearSkip = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasSkip = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 limit = 4;
 * @return {number}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setLimit = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearLimit = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ScanConsistency scan_consistency = 5;
 * @return {!proto.couchbase.view.v1.ViewQueryRequest.ScanConsistency}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getScanConsistency = function() {
  return /** @type {!proto.couchbase.view.v1.ViewQueryRequest.ScanConsistency} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.couchbase.view.v1.ViewQueryRequest.ScanConsistency} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setScanConsistency = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearScanConsistency = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasScanConsistency = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool reduce = 6;
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getReduce = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setReduce = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearReduce = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasReduce = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool group = 7;
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getGroup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setGroup = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearGroup = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 group_level = 9;
 * @return {number}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getGroupLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setGroupLevel = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearGroupLevel = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasGroupLevel = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bytes key = 10;
 * @return {!(string|Uint8Array)}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes key = 10;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearKey = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated bytes keys = 11;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getKeysList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * repeated bytes keys = 11;
 * This is a type-conversion wrapper around `getKeysList()`
 * @return {!Array<string>}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getKeysList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getKeysList()));
};


/**
 * repeated bytes keys = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeysList()`
 * @return {!Array<!Uint8Array>}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getKeysList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getKeysList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setKeysList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.addKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * optional bytes start_key = 12;
 * @return {!(string|Uint8Array)}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getStartKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes start_key = 12;
 * This is a type-conversion wrapper around `getStartKey()`
 * @return {string}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getStartKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStartKey()));
};


/**
 * optional bytes start_key = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStartKey()`
 * @return {!Uint8Array}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getStartKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStartKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setStartKey = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearStartKey = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasStartKey = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bytes end_key = 13;
 * @return {!(string|Uint8Array)}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getEndKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes end_key = 13;
 * This is a type-conversion wrapper around `getEndKey()`
 * @return {string}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getEndKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEndKey()));
};


/**
 * optional bytes end_key = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEndKey()`
 * @return {!Uint8Array}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getEndKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEndKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setEndKey = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearEndKey = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasEndKey = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool inclusive_end = 14;
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getInclusiveEnd = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setInclusiveEnd = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearInclusiveEnd = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasInclusiveEnd = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string start_key_doc_id = 15;
 * @return {string}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getStartKeyDocId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setStartKeyDocId = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearStartKeyDocId = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasStartKeyDocId = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string end_key_doc_id = 16;
 * @return {string}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getEndKeyDocId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setEndKeyDocId = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearEndKeyDocId = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasEndKeyDocId = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional ErrorMode on_error = 17;
 * @return {!proto.couchbase.view.v1.ViewQueryRequest.ErrorMode}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getOnError = function() {
  return /** @type {!proto.couchbase.view.v1.ViewQueryRequest.ErrorMode} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {!proto.couchbase.view.v1.ViewQueryRequest.ErrorMode} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setOnError = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearOnError = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasOnError = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool debug = 18;
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setDebug = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearDebug = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasDebug = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional DesignDocumentNamespace namespace = 19;
 * @return {!proto.couchbase.view.v1.ViewQueryRequest.DesignDocumentNamespace}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getNamespace = function() {
  return /** @type {!proto.couchbase.view.v1.ViewQueryRequest.DesignDocumentNamespace} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {!proto.couchbase.view.v1.ViewQueryRequest.DesignDocumentNamespace} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearNamespace = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasNamespace = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional Order order = 20;
 * @return {!proto.couchbase.view.v1.ViewQueryRequest.Order}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.getOrder = function() {
  return /** @type {!proto.couchbase.view.v1.ViewQueryRequest.Order} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {!proto.couchbase.view.v1.ViewQueryRequest.Order} value
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.setOrder = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryRequest} returns this
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.clearOrder = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryRequest.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.couchbase.view.v1.ViewQueryResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.view.v1.ViewQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.view.v1.ViewQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.view.v1.ViewQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.view.v1.ViewQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.couchbase.view.v1.ViewQueryResponse.Row.toObject, includeInstance),
    metaData: (f = msg.getMetaData()) && proto.couchbase.view.v1.ViewQueryResponse.MetaData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.view.v1.ViewQueryResponse}
 */
proto.couchbase.view.v1.ViewQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.view.v1.ViewQueryResponse;
  return proto.couchbase.view.v1.ViewQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.view.v1.ViewQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.view.v1.ViewQueryResponse}
 */
proto.couchbase.view.v1.ViewQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.couchbase.view.v1.ViewQueryResponse.Row;
      reader.readMessage(value,proto.couchbase.view.v1.ViewQueryResponse.Row.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    case 2:
      var value = new proto.couchbase.view.v1.ViewQueryResponse.MetaData;
      reader.readMessage(value,proto.couchbase.view.v1.ViewQueryResponse.MetaData.deserializeBinaryFromReader);
      msg.setMetaData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.view.v1.ViewQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.view.v1.ViewQueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.view.v1.ViewQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.view.v1.ViewQueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.couchbase.view.v1.ViewQueryResponse.Row.serializeBinaryToWriter
    );
  }
  f = message.getMetaData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.couchbase.view.v1.ViewQueryResponse.MetaData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.view.v1.ViewQueryResponse.Row.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.view.v1.ViewQueryResponse.Row} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.view.v1.ViewQueryResponse.Row}
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.view.v1.ViewQueryResponse.Row;
  return proto.couchbase.view.v1.ViewQueryResponse.Row.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.view.v1.ViewQueryResponse.Row} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.view.v1.ViewQueryResponse.Row}
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.view.v1.ViewQueryResponse.Row.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.view.v1.ViewQueryResponse.Row} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.couchbase.view.v1.ViewQueryResponse.Row} returns this
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.couchbase.view.v1.ViewQueryResponse.Row} returns this
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.couchbase.view.v1.ViewQueryResponse.Row} returns this
 */
proto.couchbase.view.v1.ViewQueryResponse.Row.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData.prototype.toObject = function(opt_includeInstance) {
  return proto.couchbase.view.v1.ViewQueryResponse.MetaData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.couchbase.view.v1.ViewQueryResponse.MetaData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalRows: jspb.Message.getFieldWithDefault(msg, 1, 0),
    debug: msg.getDebug_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.couchbase.view.v1.ViewQueryResponse.MetaData}
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.couchbase.view.v1.ViewQueryResponse.MetaData;
  return proto.couchbase.view.v1.ViewQueryResponse.MetaData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.couchbase.view.v1.ViewQueryResponse.MetaData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.couchbase.view.v1.ViewQueryResponse.MetaData}
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalRows(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDebug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.couchbase.view.v1.ViewQueryResponse.MetaData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.couchbase.view.v1.ViewQueryResponse.MetaData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalRows();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDebug_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 total_rows = 1;
 * @return {number}
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData.prototype.getTotalRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.couchbase.view.v1.ViewQueryResponse.MetaData} returns this
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData.prototype.setTotalRows = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes debug = 2;
 * @return {!(string|Uint8Array)}
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData.prototype.getDebug = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes debug = 2;
 * This is a type-conversion wrapper around `getDebug()`
 * @return {string}
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData.prototype.getDebug_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDebug()));
};


/**
 * optional bytes debug = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDebug()`
 * @return {!Uint8Array}
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData.prototype.getDebug_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDebug()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.couchbase.view.v1.ViewQueryResponse.MetaData} returns this
 */
proto.couchbase.view.v1.ViewQueryResponse.MetaData.prototype.setDebug = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated Row rows = 1;
 * @return {!Array<!proto.couchbase.view.v1.ViewQueryResponse.Row>}
 */
proto.couchbase.view.v1.ViewQueryResponse.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.couchbase.view.v1.ViewQueryResponse.Row>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.couchbase.view.v1.ViewQueryResponse.Row, 1));
};


/**
 * @param {!Array<!proto.couchbase.view.v1.ViewQueryResponse.Row>} value
 * @return {!proto.couchbase.view.v1.ViewQueryResponse} returns this
*/
proto.couchbase.view.v1.ViewQueryResponse.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.couchbase.view.v1.ViewQueryResponse.Row=} opt_value
 * @param {number=} opt_index
 * @return {!proto.couchbase.view.v1.ViewQueryResponse.Row}
 */
proto.couchbase.view.v1.ViewQueryResponse.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.couchbase.view.v1.ViewQueryResponse.Row, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.couchbase.view.v1.ViewQueryResponse} returns this
 */
proto.couchbase.view.v1.ViewQueryResponse.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};


/**
 * optional MetaData meta_data = 2;
 * @return {?proto.couchbase.view.v1.ViewQueryResponse.MetaData}
 */
proto.couchbase.view.v1.ViewQueryResponse.prototype.getMetaData = function() {
  return /** @type{?proto.couchbase.view.v1.ViewQueryResponse.MetaData} */ (
    jspb.Message.getWrapperField(this, proto.couchbase.view.v1.ViewQueryResponse.MetaData, 2));
};


/**
 * @param {?proto.couchbase.view.v1.ViewQueryResponse.MetaData|undefined} value
 * @return {!proto.couchbase.view.v1.ViewQueryResponse} returns this
*/
proto.couchbase.view.v1.ViewQueryResponse.prototype.setMetaData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.couchbase.view.v1.ViewQueryResponse} returns this
 */
proto.couchbase.view.v1.ViewQueryResponse.prototype.clearMetaData = function() {
  return this.setMetaData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.couchbase.view.v1.ViewQueryResponse.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.couchbase.view.v1);
